const fs = require('fs');
const chokidar = require('chokidar');
require('dotenv').config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const { sendTelegramMessage } = require('./telegram'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π

// –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ process.env
const LOG_FILE_OUT = process.env.LOG_FILE_OUT;
const LOG_FILE_ERR = process.env.LOG_FILE_ERR;
// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞, —Ä–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏–∑ .env –ø–æ –∑–∞–ø—è—Ç–æ–π
const CRITICAL_KEYWORDS = process.env.CRITICAL_KEYWORDS.split(',').map(kw => kw.trim().toLowerCase());
const WARNING_KEYWORDS = process.env.WARNING_KEYWORDS.split(',').map(kw => kw.trim().toLowerCase());
const PM2_APP_NAME = process.env.PM2_APP_NAME;
const CHAT_ID = process.env.CHAT_ID; // Chat ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤—ã—Ö –ª–æ–≥–∞—Ö

// –ü–æ–∑–∏—Ü–∏–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –±–∞–π—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ª–æ–≥-—Ñ–∞–π–ª–∞
let lastPositionOut = { value: 0 };
let lastPositionErr = { value: 0 };

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∏–ª–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏—Ö –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.
 * @param {string} logLine - –°—Ç—Ä–æ–∫–∞ –ª–æ–≥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.
 * @returns {'CRITICAL' | 'WARNING' | null} - –¢–∏–ø –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –∏–ª–∏ null, –µ—Å–ª–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –Ω–µ—Ç.
 */
function checkLogForKeywords(logLine) {
    const lowerCaseLine = logLine.toLowerCase();
    for (const keyword of CRITICAL_KEYWORDS) {
        if (lowerCaseLine.includes(keyword)) {
            return 'CRITICAL';
        }
    }
    for (const keyword of WARNING_KEYWORDS) {
        if (lowerCaseLine.includes(keyword)) {
            return 'WARNING';
        }
    }
    return null; // –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ –ª–æ–≥–∞, —á–∏—Ç–∞–µ—Ç –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ Telegram.
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–∞.
 * @param {{value: number}} lastPositionRef - –°—Å—ã–ª–∫–∞ –Ω–∞ –æ–±—ä–µ–∫—Ç —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π –ø–æ–∑–∏—Ü–∏–µ–π.
 * @param {'out' | 'err'} type - –¢–∏–ø –ª–æ–≥–∞ (stdout –∏–ª–∏ stderr).
 */
function processLogFile(filePath, lastPositionRef, type) {
    fs.stat(filePath, (err, stats) => {
        if (err) {
            console.error(`Error stat-ing file ${filePath}:`, err.message);
            return;
        }

        const currentSize = stats.size;
        // –ï—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª —É—Å–µ—á–µ–Ω (—Ä–∞–∑–º–µ—Ä —Å—Ç–∞–ª –º–µ–Ω—å—à–µ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ), –Ω–∞—á–∏–Ω–∞–µ–º —á—Ç–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞
        if (currentSize < lastPositionRef.value) {
            console.log(`Log file ${filePath} was truncated. Reading from start.`);
            lastPositionRef.value = 0;
        }

        // –ï—Å–ª–∏ –µ—Å—Ç—å –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        if (currentSize > lastPositionRef.value) {
            // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫ —á—Ç–µ–Ω–∏—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–π –∏–∑–≤–µ—Å—Ç–Ω–æ–π –ø–æ–∑–∏—Ü–∏–∏
            const stream = fs.createReadStream(filePath, { start: lastPositionRef.value, encoding: 'utf8' });
            let unprocessedLines = ''; // –ë—É—Ñ–µ—Ä –¥–ª—è –Ω–µ–ø–æ–ª–Ω—ã—Ö —Å—Ç—Ä–æ–∫

            stream.on('data', (chunk) => {
                const lines = (unprocessedLines + chunk).split('\n');
                unprocessedLines = lines.pop(); // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–µ

                for (const line of lines) {
                    if (line.trim() === '') continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

                    const alertType = checkLogForKeywords(line);
                    if (alertType) {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ
                        sendTelegramMessage(CHAT_ID, `üö® *${alertType}* (*${PM2_APP_NAME}*)\n\`\`\`\n${line}\n\`\`\``);
                    } else {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—É—é –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –ª–æ–≥–∞
                        sendTelegramMessage(CHAT_ID, `[${type.toUpperCase()} - *${PM2_APP_NAME}* - NEW]\n\`\`\`\n${line}\n\`\`\``);
                    }
                }
            });

            stream.on('end', () => {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –Ω–µ–ø–æ–ª–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á—Ç–µ–Ω–∏—è
                if (unprocessedLines.trim() !== '') {
                    const alertType = checkLogForKeywords(unprocessedLines);
                    if (alertType) {
                        sendTelegramMessage(CHAT_ID, `üö® *${alertType}* (*${PM2_APP_NAME}*)\n\`\`\`\n${unprocessedLines}\n\`\`\``);
                    } else {
                        sendTelegramMessage(CHAT_ID, `[${type.toUpperCase()} - *${PM2_APP_NAME}* - NEW]\n\`\`\`\n${unprocessedLines}\n\`\`\``);
                    }
                }
                lastPositionRef.value = currentSize; // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
            });

            stream.on('error', (readErr) => {
                console.error(`Error reading from file ${filePath}:`, readErr.message);
            });
        }
    });
}

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏ —á—Ç–µ–Ω–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤.
 * –ï—Å–ª–∏ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–æ–∑–∏—Ü–∏—é –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞, —á—Ç–æ–±—ã –Ω–µ —á–∏—Ç–∞—Ç—å —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ.
 */
function initializeLogPositions() {
    [LOG_FILE_OUT, LOG_FILE_ERR].forEach(filePath => {
        if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            if (filePath === LOG_FILE_OUT) lastPositionOut.value = stats.size;
            if (filePath === LOG_FILE_ERR) lastPositionErr.value = stats.size;
            console.log(`Initial position for ${filePath}: ${stats.size}`);
        } else {
            console.warn(`Log file not found: ${filePath}. It will be watched when created.`);
        }
    });
}

/**
 * –ó–∞–ø—É—Å–∫–∞–µ—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ª–æ–≥–æ–≤ —Å –ø–æ–º–æ—â—å—é chokidar.
 */
function startLogWatcher() {
    initializeLogPositions(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–æ–∑–∏—Ü–∏–∏ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
    console.log(`Watching for logs from: ${LOG_FILE_OUT} and ${LOG_FILE_ERR}`);

    const watcher = chokidar.watch([LOG_FILE_OUT, LOG_FILE_ERR], {
        persistent: true, // –ü—Ä–æ–¥–æ–ª–∂–∞—Ç—å –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –¥–∞–∂–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã (–¥–ª—è –¥–µ–º–æ–Ω–∞)
        ignoreInitial: true, // –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏—è 'add'/'change' –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ (—á—Ç–æ–±—ã –Ω–µ —á–∏—Ç–∞—Ç—å –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –ª–æ–≥–∏)
        awaitWriteFinish: { // –û–∂–∏–¥–∞—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª, –ø—Ä–µ–∂–¥–µ —á–µ–º –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –µ–≥–æ
            stabilityThreshold: 2000, // –ó–∞–¥–µ—Ä–∂–∫–∞ –≤ –º—Å –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ —Å—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª "—Å—Ç–∞–±–∏–ª—å–Ω—ã–º"
            pollInterval: 100 // –ò–Ω—Ç–µ—Ä–≤–∞–ª –æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        }
    });

    watcher
        .on('add', (filePath) => {
            console.log(`File ${filePath} has been added`);
            // –ï—Å–ª–∏ —Ñ–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —á—Ç–µ–Ω–∏–µ —Å –Ω–∞—á–∞–ª–∞
            if (filePath === LOG_FILE_OUT) lastPositionOut.value = 0;
            if (filePath === LOG_FILE_ERR) lastPositionErr.value = 0;
            processLogFile(filePath, filePath === LOG_FILE_OUT ? lastPositionOut : lastPositionErr, filePath === LOG_FILE_OUT ? 'out' : 'err');
        })
        .on('change', (filePath) => {
            console.log(`File ${filePath} has been changed`);
            processLogFile(filePath, filePath === LOG_FILE_OUT ? lastPositionOut : lastPositionErr, filePath === LOG_FILE_OUT ? 'out' : 'err');
        })
        .on('error', (error) => console.error(`Watcher error: ${error}`));
}

/**
 * –ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤.
 * @param {string} filePath - –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –ª–æ–≥–æ–≤.
 * @param {number} numLines - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è —á—Ç–µ–Ω–∏—è.
 * @param {function(Error|null, string|null): void} callback - Callback-—Ñ—É–Ω–∫—Ü–∏—è, –≤—ã–∑—ã–≤–∞–µ–º–∞—è –ø–æ—Å–ª–µ —á—Ç–µ–Ω–∏—è.
 */
function readLastLines(filePath, numLines, callback) {
    if (!fs.existsSync(filePath)) {
        return callback(null, `–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: \`${filePath}\``);
    }

    fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) {
            console.error(`Error reading file ${filePath}:`, err.message);
            return callback(err);
        }
        const lines = data.split('\n').filter(line => line.trim() !== ''); // –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –∏ —É–±–∏—Ä–∞–µ–º –ø—É—Å—Ç—ã–µ
        const lastLines = lines.slice(-numLines); // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫
        callback(null, lastLines.join('\n'));
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ index.js
module.exports = {
    startLogWatcher,
    readLastLines
};