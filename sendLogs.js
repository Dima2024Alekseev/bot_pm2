const axios = require('axios');
const fs = require('fs');
const path = require('path');
const chokidar = require('chokidar');
const TelegramBot = require('node-telegram-bot-api');
const pm2 = require('pm2');
const { getDrives } = require('node-disk-info');
const os = require('os');
const moment = require('moment');
require('moment-duration-format');

// ============== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ==============
const CONFIG = {
    BOT_TOKEN: '8127032296:AAH7Vxg7v5I_6M94oZbidNvtyPEAFQVEPds',
    CHAT_ID: '1364079703',
    PM2_APP_NAME: 'server-site',
    
    // –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
    THRESHOLDS: {
        DISK_SPACE_PERCENT: 15,
        CPU_PERCENT: 80,
        MEMORY_MB: 500,
        TEMPERATURE: 70 // –î–ª—è CPU —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–æ)
    },
    
    // –ò–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
    INTERVALS: {
        SYSTEM_CHECK: 5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
        STATUS_UPDATE: 60 * 60 * 1000 // 1 —á–∞—Å
    },
    
    // –ü—É—Ç–∏ –∫ –ª–æ–≥–∞–º
    LOG_PATHS: {
        OUT: '/root/.pm2/logs/server-site-out.log',
        ERR: '/root/.pm2/logs/server-site-error.log'
    },
    
    // –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤
    KEYWORDS: {
        CRITICAL: ['error', 'fatal', 'critical', 'exception', 'failed', 'timeout', 'denied', 'unauthorized', 'segfault'],
        WARNING: ['warn', 'warning', 'deprecated', 'unstable', 'notice']
    },
    
    // –°–º–∞–π–ª—ã –¥–ª—è —Å—Ç–∞—Ç—É—Å–æ–≤
    EMOJIS: {
        ONLINE: 'üü¢',
        OFFLINE: 'üî¥',
        RESTART: 'üü°',
        WARNING: '‚ö†Ô∏è',
        CRITICAL: 'üö®',
        INFO: '‚ÑπÔ∏è',
        DISK: 'üíæ',
        MEMORY: 'üß†',
        CPU: '‚ö°',
        TEMP: 'üå°Ô∏è',
        NETWORK: 'üåê'
    }
};

// ============== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ==============
const bot = new TelegramBot(CONFIG.BOT_TOKEN, { polling: true });
let lastLogPositions = { OUT: 0, ERR: 0 };

// ============== –£–¢–ò–õ–ò–¢–´ ==============
class Logger {
    static log(message, type = 'INFO') {
        const timestamp = new Date().toISOString();
        console.log(`[${timestamp}] [${type}] ${message}`);
    }
    
    static error(message) {
        this.log(message, 'ERROR');
    }
    
    static warn(message) {
        this.log(message, 'WARN');
    }
}

class FormatUtils {
    static bytesToGB(bytes) {
        return (bytes / (1024 ** 3)).toFixed(2);
    }
    
    static bytesToMB(bytes) {
        return (bytes / (1024 ** 2)).toFixed(2);
    }
    
    static formatUptime(ms) {
        return moment.duration(ms).format("d [–¥–Ω–µ–π], h [—á–∞—Å–æ–≤], m [–º–∏–Ω]");
    }
    
    static escapeMarkdown(text) {
        return text.replace(/[_*[\]()~`>#+-=|{}.!]/g, '\\$&');
    }
    
    static formatProcessStatus(status) {
        const statusMap = {
            'online': `${CONFIG.EMOJIS.ONLINE} –†–∞–±–æ—Ç–∞–µ—Ç`,
            'stopped': `${CONFIG.EMOJIS.OFFLINE} –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`,
            'restarting': `${CONFIG.EMOJIS.RESTART} –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è`,
            'errored': `${CONFIG.EMOJIS.CRITICAL} –û—à–∏–±–∫–∞`,
            'launching': `${CONFIG.EMOJIS.INFO} –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è`
        };
        return statusMap[status] || status;
    }
}

// ============== –û–°–ù–û–í–ù–´–ï –§–£–ù–ö–¶–ò–ò ==============
class TelegramService {
    static async sendMessage(chatId, text, options = {}) {
        if (!text.trim() && !options.force) return;
        
        try {
            const messageOptions = {
                parse_mode: 'MarkdownV2',
                disable_web_page_preview: true,
                ...options
            };
            
            // –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            const MAX_LENGTH = 4000;
            if (text.length > MAX_LENGTH) {
                const parts = [];
                let remaining = text;
                
                while (remaining.length > 0) {
                    const part = remaining.substring(0, MAX_LENGTH);
                    const lastNewline = part.lastIndexOf('\n');
                    
                    if (lastNewline > 0 && remaining.length > MAX_LENGTH) {
                        parts.push(part.substring(0, lastNewline));
                        remaining = remaining.substring(lastNewline + 1);
                    } else {
                        parts.push(part);
                        remaining = remaining.substring(MAX_LENGTH);
                    }
                }
                
                for (const part of parts) {
                    await bot.sendMessage(chatId, part, messageOptions);
                    await new Promise(resolve => setTimeout(resolve, 300)); // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                }
            } else {
                await bot.sendMessage(chatId, text, messageOptions);
            }
        } catch (error) {
            Logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: ${error.message}`);
            // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ Markdown
            try {
                await bot.sendMessage(chatId, FormatUtils.escapeMarkdown(text));
            } catch (fallbackError) {
                Logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–µ: ${fallbackError.message}`);
            }
        }
    }
    
    static async sendFormattedMessage(chatId, title, content, options = {}) {
        const formattedText = `*${title}*\n\n${content}`;
        return this.sendMessage(chatId, formattedText, options);
    }
}

class LogMonitor {
    static initialize() {
        Logger.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤...');
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∑–∏—Ü–∏–π –ª–æ–≥–æ–≤
        this.initLogPositions();
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ watcher
        const watcher = chokidar.watch(Object.values(CONFIG.LOG_PATHS), {
            persistent: true,
            ignoreInitial: true,
            awaitWriteFinish: {
                stabilityThreshold: 2000,
                pollInterval: 100
            }
        });
        
        watcher
            .on('add', filePath => this.handleLogChange(filePath))
            .on('change', filePath => this.handleLogChange(filePath))
            .on('error', error => Logger.error(`–û—à–∏–±–∫–∞ watcher: ${error.message}`));
    }
    
    static initLogPositions() {
        Object.entries(CONFIG.LOG_PATHS).forEach(([type, path]) => {
            if (fs.existsSync(path)) {
                lastLogPositions[type] = fs.statSync(path).size;
                Logger.log(`–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ –ø–æ–∑–∏—Ü–∏—è –¥–ª—è ${type} –ª–æ–≥–∞: ${lastLogPositions[type]}`);
            } else {
                Logger.warn(`–§–∞–π–ª –ª–æ–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${path}`);
            }
        });
    }
    
    static handleLogChange(filePath) {
        const logType = filePath === CONFIG.LOG_PATHS.OUT ? 'OUT' : 'ERR';
        const stats = fs.statSync(filePath);
        
        if (stats.size < lastLogPositions[logType]) {
            Logger.log(`–õ–æ–≥ —Ñ–∞–π–ª ${logType} –±—ã–ª –æ–±—Ä–µ–∑–∞–Ω, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é`);
            lastLogPositions[logType] = 0;
        }
        
        if (stats.size > lastLogPositions[logType]) {
            this.processNewLogs(filePath, logType, stats.size);
        }
    }
    
    static processNewLogs(filePath, logType, newSize) {
        const stream = fs.createReadStream(filePath, {
            start: lastLogPositions[logType],
            encoding: 'utf8'
        });
        
        let buffer = '';
        
        stream.on('data', chunk => {
            buffer += chunk;
            const lines = buffer.split('\n');
            buffer = lines.pop() || '';
            
            lines.forEach(line => {
                if (line.trim()) {
                    this.analyzeLogLine(line, logType);
                }
            });
        });
        
        stream.on('end', () => {
            if (buffer.trim()) {
                this.analyzeLogLine(buffer, logType);
            }
            lastLogPositions[logType] = newSize;
        });
        
        stream.on('error', error => {
            Logger.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–∞ ${logType}: ${error.message}`);
        });
    }
    
    static analyzeLogLine(line, logType) {
        const lowerLine = line.toLowerCase();
        const isCritical = CONFIG.KEYWORDS.CRITICAL.some(kw => lowerLine.includes(kw));
        const isWarning = CONFIG.KEYWORDS.WARNING.some(kw => lowerLine.includes(kw));
        
        if (isCritical) {
            this.sendLogAlert(line, 'CRITICAL', logType);
        } else if (isWarning) {
            this.sendLogAlert(line, 'WARNING', logType);
        }
    }
    
    static sendLogAlert(line, severity, logType) {
        const emoji = severity === 'CRITICAL' ? CONFIG.EMOJIS.CRITICAL : CONFIG.EMOJIS.WARNING;
        const message = `${emoji} *${severity}* (${CONFIG.PM2_APP_NAME}, ${logType}):\n\`\`\`\n${line}\n\`\`\``;
        TelegramService.sendMessage(CONFIG.CHAT_ID, message);
    }
    
    static getLogs(logType, linesCount = 20) {
        return new Promise((resolve, reject) => {
            const filePath = CONFIG.LOG_PATHS[logType];
            
            if (!fs.existsSync(filePath)) {
                return reject(`–§–∞–π–ª –ª–æ–≥–∞ ${logType} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            
            fs.readFile(filePath, 'utf8', (err, data) => {
                if (err) return reject(err);
                
                const lines = data.split('\n')
                    .filter(line => line.trim())
                    .slice(-linesCount);
                
                resolve(lines.join('\n'));
            });
        });
    }
}

class SystemMonitor {
    static async checkSystemHealth() {
        Logger.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...');
        
        try {
            const [diskInfo, pm2Info, systemInfo] = await Promise.all([
                this.getDiskInfo(),
                this.getPm2Info(),
                this.getSystemInfo()
            ]);
            
            let message = '*üõ†Ô∏è –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã*\n\n';
            let hasProblems = false;
            
            // –î–∏—Å–∫–∏
            message += `*${CONFIG.EMOJIS.DISK} –î–∏—Å–∫–æ–≤–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ:*\n`;
            diskInfo.forEach(disk => {
                const freePercent = (disk.free / disk.total * 100).toFixed(1);
                message += `‚ñ∏ *${disk.mount}*: ${freePercent}% —Å–≤–æ–±–æ–¥–Ω–æ (${FormatUtils.bytesToGB(disk.free)}/${FormatUtils.bytesToGB(disk.total)} GB)\n`;
                
                if (freePercent < CONFIG.THRESHOLDS.DISK_SPACE_PERCENT) {
                    message += `   ${CONFIG.EMOJIS.WARNING} *–ú–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞!*\n`;
                    hasProblems = true;
                }
            });
            
            // PM2 –ø—Ä–æ—Ü–µ—Å—Å
            message += `\n*üöÄ ${CONFIG.PM2_APP_NAME} —Å—Ç–∞—Ç—É—Å:*\n`;
            if (pm2Info) {
                message += `‚ñ∏ –°–æ—Å—Ç–æ—è–Ω–∏–µ: ${FormatUtils.formatProcessStatus(pm2Info.status)}\n`;
                message += `‚ñ∏ Uptime: ${FormatUtils.formatUptime(Date.now() - pm2Info.pm_uptime)}\n`;
                message += `‚ñ∏ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: ${pm2Info.restart_time}\n`;
                message += `‚ñ∏ ${CONFIG.EMOJIS.CPU} CPU: ${pm2Info.cpu}%\n`;
                message += `‚ñ∏ ${CONFIG.EMOJIS.MEMORY} –ü–∞–º—è—Ç—å: ${FormatUtils.bytesToMB(pm2Info.memory)} MB\n`;
                
                if (pm2Info.cpu > CONFIG.THRESHOLDS.CPU_PERCENT) {
                    message += `   ${CONFIG.EMOJIS.WARNING} *–í—ã—Å–æ–∫–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ CPU!*\n`;
                    hasProblems = true;
                }
                
                if (pm2Info.memory / (1024 ** 2) > CONFIG.THRESHOLDS.MEMORY_MB) {
                    message += `   ${CONFIG.EMOJIS.WARNING} *–í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –ø–∞–º—è—Ç–∏!*\n`;
                    hasProblems = true;
                }
            } else {
                message += `${CONFIG.EMOJIS.OFFLINE} –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –Ω–∞–π–¥–µ–Ω\n`;
                hasProblems = true;
            }
            
            // –°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
            message += `\n*${CONFIG.EMOJIS.INFO} –°–∏—Å—Ç–µ–º–∞:*\n`;
            message += `‚ñ∏ ${CONFIG.EMOJIS.CPU} –ó–∞–≥—Ä—É–∑–∫–∞ CPU: ${systemInfo.cpuLoad}%\n`;
            message += `‚ñ∏ ${CONFIG.EMOJIS.MEMORY} –°–≤–æ–±–æ–¥–Ω–æ RAM: ${FormatUtils.bytesToMB(systemInfo.freeMem)}/${FormatUtils.bytesToMB(systemInfo.totalMem)} MB\n`;
            message += `‚ñ∏ ${CONFIG.EMOJIS.NETWORK} –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: ${FormatUtils.formatUptime(systemInfo.uptime * 1000)}\n`;
            
            if (systemInfo.temperature && systemInfo.temperature > CONFIG.THRESHOLDS.TEMPERATURE) {
                message += `   ${CONFIG.EMOJIS.WARNING} *–í—ã—Å–æ–∫–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ CPU: ${systemInfo.temperature}¬∞C!*\n`;
                hasProblems = true;
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã –∏–ª–∏ —ç—Ç–æ —Ä—É—á–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
            return { message, hasProblems };
        } catch (error) {
            Logger.error(`–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: ${error.message}`);
            return {
                message: `${CONFIG.EMOJIS.CRITICAL} *–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã:*\n\n${error.message}`,
                hasProblems: true
            };
        }
    }
    
    static async getDiskInfo() {
        try {
            const drives = await getDrives();
            return drives.map(drive => ({
                mount: drive.mounted,
                total: drive.total,
                free: drive.available,
                used: drive.used
            }));
        } catch (error) {
            Logger.error(`–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö: ${error.message}`);
            throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∏—Å–∫–∞—Ö');
        }
    }
    
    static async getPm2Info() {
        return new Promise((resolve, reject) => {
            pm2.list((err, list) => {
                if (err) return reject(err);
                
                const app = list.find(p => p.name === CONFIG.PM2_APP_NAME);
                if (!app) return resolve(null);
                
                resolve({
                    status: app.pm2_env.status,
                    pm_uptime: app.pm2_env.pm_uptime,
                    restart_time: app.pm2_env.restart_time,
                    cpu: app.monit.cpu,
                    memory: app.monit.memory
                });
            });
        });
    }
    
    static async getSystemInfo() {
        const cpuLoad = os.loadavg()[0] * 100 / os.cpus().length;
        const freeMem = os.freemem();
        const totalMem = os.totalmem();
        const uptime = os.uptime();
        
        // –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—É CPU (Linux)
        let temperature = null;
        try {
            if (fs.existsSync('/sys/class/thermal/thermal_zone0/temp')) {
                const tempData = fs.readFileSync('/sys/class/thermal/thermal_zone0/temp', 'utf8');
                temperature = parseInt(tempData, 10) / 1000;
            }
        } catch (error) {
            Logger.error(`–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã CPU: ${error.message}`);
        }
        
        return {
            cpuLoad: cpuLoad.toFixed(1),
            freeMem,
            totalMem,
            uptime,
            temperature
        };
    }
}

class Pm2Manager {
    static connect() {
        return new Promise((resolve, reject) => {
            pm2.connect(err => {
                if (err) return reject(err);
                Logger.log('–ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PM2');
                resolve();
            });
        });
    }
    
    static setupEventBus() {
        pm2.launchBus((err, bus) => {
            if (err) {
                Logger.error(`–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ PM2 bus: ${err.message}`);
                return;
            }
            
            bus.on('process:event', data => {
                if (data.process.name === CONFIG.PM2_APP_NAME) {
                    this.handlePm2Event(data.event, data.process);
                }
            });
        });
    }
    
    static handlePm2Event(event, process) {
        const eventMessages = {
            'stop': `${CONFIG.EMOJIS.OFFLINE} *–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!*`,
            'restart': `${CONFIG.EMOJIS.RESTART} *–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω–æ!*`,
            'exit': `${CONFIG.EMOJIS.CRITICAL} *–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∏–ª–æ—Å—å —Å –æ—à–∏–±–∫–æ–π!*`,
            'online': `${CONFIG.EMOJIS.ONLINE} *–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∑–∞–ø—É—â–µ–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç!*`,
            'error': `${CONFIG.EMOJIS.CRITICAL} *–û—à–∏–±–∫–∞ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏!*`
        };
        
        const message = eventMessages[event] || `${CONFIG.EMOJIS.INFO} –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${event}`;
        TelegramService.sendFormattedMessage(
            CONFIG.CHAT_ID,
            `PM2 –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (${CONFIG.PM2_APP_NAME})`,
            `${message}\n\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: ${FormatUtils.formatProcessStatus(process.status)}`
        );
    }
    
    static async listProcesses() {
        return new Promise((resolve, reject) => {
            pm2.list((err, list) => {
                if (err) return reject(err);
                resolve(list);
            });
        });
    }
    
    static async controlProcess(action) {
        const actions = {
            'start': pm2.start,
            'stop': pm2.stop,
            'restart': pm2.restart,
            'delete': pm2.delete
        };
        
        if (!actions[action]) {
            throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
        }
        
        return new Promise((resolve, reject) => {
            actions[action](CONFIG.PM2_APP_NAME, (err, proc) => {
                if (err) return reject(err);
                resolve(proc);
            });
        });
    }
}

// ============== –ö–û–ú–ê–ù–î–´ –ë–û–¢–ê ==============
class BotCommands {
    static initialize() {
        // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        bot.onText(/\/start/, this.handleStart);
        bot.onText(/\/help/, this.handleHelp);
        bot.onText(/\/status/, this.handleStatus);
        bot.onText(/\/logs/, this.handleLogs);
        bot.onText(/\/health/, this.handleHealth);
        bot.onText(/\/list/, this.handleList);
        
        // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–º
        bot.onText(/\/start_process/, this.handleStartProcess);
        bot.onText(/\/stop_process/, this.handleStopProcess);
        bot.onText(/\/restart_process/, this.handleRestartProcess);
        
        Logger.log('–ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã');
    }
    
    static handleStart(msg) {
        const chatId = msg.chat.id;
        if (String(chatId) !== String(CONFIG.CHAT_ID)) return;
        
        const welcomeMessage = `üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–º–æ–Ω–∏—Ç–æ—Ä –¥–ª—è ${CONFIG.PM2_APP_NAME}*\n\n` +
            `–Ø –º–æ–≥—É:\n` +
            `‚ñ∏ –û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ª–æ–≥–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö\n` +
            `‚ñ∏ –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º—ã\n` +
            `‚ñ∏ –£–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–º\n\n` +
            `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥`;
        
        TelegramService.sendFormattedMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!', welcomeMessage);
    }
    
    static handleHelp(msg) {
        const chatId = msg.chat.id;
        if (String(chatId) !== String(CONFIG.CHAT_ID)) return;
        
        const helpMessage = `üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n` +
            `*–û—Å–Ω–æ–≤–Ω—ã–µ:*\n` +
            `‚ñ∏ /status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è\n` +
            `‚ñ∏ /logs [N] - –ü–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20)\n` +
            `‚ñ∏ /health - –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã\n` +
            `‚ñ∏ /list - –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n\n` +
            `*–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*\n` +
            `‚ñ∏ /start_process - –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n` +
            `‚ñ∏ /stop_process - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n` +
            `‚ñ∏ /restart_process - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n\n` +
            `*–ù–∞—Å—Ç—Ä–æ–π–∫–∏:*\n` +
            `‚ñ∏ /thresholds - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ—Ä–æ–≥–∏ –æ–ø–æ–≤–µ—â–µ–Ω–∏–π\n` +
            `‚ñ∏ /set_threshold [—Ç–∏–ø] [–∑–Ω–∞—á–µ–Ω–∏–µ] - –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ—Ä–æ–≥`;
        
        TelegramService.sendFormattedMessage(chatId, '–ü–æ–º–æ—â—å', helpMessage);
    }
    
    static async handleStatus(msg) {
        const chatId = msg.chat.id;
        if (String(chatId) !== String(CONFIG.CHAT_ID)) return;
        
        try {
            const { message } = await SystemMonitor.checkSystemHealth();
            TelegramService.sendMessage(chatId, message);
        } catch (error) {
            TelegramService.sendMessage(chatId, `${CONFIG.EMOJIS.CRITICAL} –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: ${error.message}`);
        }
    }
    
    static async handleLogs(msg, match) {
        const chatId = msg.chat.id;
        if (String(chatId) !== String(CONFIG.CHAT_ID)) return;
        
        const linesCount = match[1] ? parseInt(match[1]) : 20;
        
        if (isNaN(linesCount)) {
            return TelegramService.sendMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /logs 50)');
        }
        
        try {
            const [outLogs, errLogs] = await Promise.all([
                LogMonitor.getLogs('OUT', linesCount),
                LogMonitor.getLogs('ERR', linesCount)
            ]);
            
            let response = `üìú *–ü–æ—Å–ª–µ–¥–Ω–∏–µ ${linesCount} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤*\n\n`;
            response += `*OUT logs:*\n\`\`\`\n${outLogs || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\`\`\`\n\n`;
            response += `*ERR logs:*\n\`\`\`\n${errLogs || '–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö'}\n\`\`\``;
            
            TelegramService.sendMessage(chatId, response);
        } catch (error) {
            TelegramService.sendMessage(chatId, `${CONFIG.EMOJIS.CRITICAL} –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: ${error.message}`);
        }
    }
    
    static async handleHealth(msg) {
        const chatId = msg.chat.id;
        if (String(chatId) !== String(CONFIG.CHAT_ID)) return;
        
        try {
            const { message } = await SystemMonitor.checkSystemHealth();
            TelegramService.sendMessage(chatId, message);
        } catch (error) {
            TelegramService.sendMessage(chatId, `${CONFIG.EMOJIS.CRITICAL} –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã: ${error.message}`);
        }
    }
    
    static async handleList(msg) {
        const chatId = msg.chat.id;
        if (String(chatId) !== String(CONFIG.CHAT_ID)) return;
        
        try {
            const processes = await Pm2Manager.listProcesses();
            
            if (processes.length === 0) {
                return TelegramService.sendMessage(chatId, '–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤');
            }
            
            let message = 'üìã *–°–ø–∏—Å–æ–∫ PM2 –ø—Ä–æ—Ü–µ—Å—Å–æ–≤*\n\n';
            
            processes.forEach(proc => {
                const isMainApp = proc.name === CONFIG.PM2_APP_NAME;
                const prefix = isMainApp ? '‚≠ê ' : '‚ñ∏ ';
                
                message += `${prefix}*${proc.name}* (ID: ${proc.pm_id})\n`;
                message += `   –°—Ç–∞—Ç—É—Å: ${FormatUtils.formatProcessStatus(proc.pm2_env.status)}\n`;
                message += `   CPU: ${proc.monit.cpu}% | –ü–∞–º—è—Ç—å: ${FormatUtils.bytesToMB(proc.monit.memory)} MB\n`;
                message += `   Uptime: ${FormatUtils.formatUptime(Date.now() - proc.pm2_env.pm_uptime)}\n`;
                message += `   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: ${proc.pm2_env.restart_time}\n\n`;
            });
            
            TelegramService.sendMessage(chatId, message);
        } catch (error) {
            TelegramService.sendMessage(chatId, `${CONFIG.EMOJIS.CRITICAL} –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: ${error.message}`);
        }
    }
    
    static async handleStartProcess(msg) {
        const chatId = msg.chat.id;
        if (String(chatId) !== String(CONFIG.CHAT_ID)) return;
        
        try {
            await TelegramService.sendMessage(chatId, `${CONFIG.EMOJIS.INFO} –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å...`);
            await Pm2Manager.controlProcess('start');
            TelegramService.sendMessage(chatId, `${CONFIG.EMOJIS.ONLINE} –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω`);
        } catch (error) {
            TelegramService.sendMessage(chatId, `${CONFIG.EMOJIS.CRITICAL} –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: ${error.message}`);
        }
    }
    
    static async handleStopProcess(msg) {
        const chatId = msg.chat.id;
        if (String(chatId) !== String(CONFIG.CHAT_ID)) return;
        
        try {
            await TelegramService.sendMessage(chatId, `${CONFIG.EMOJIS.INFO} –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å...`);
            await Pm2Manager.controlProcess('stop');
            TelegramService.sendMessage(chatId, `${CONFIG.EMOJIS.OFFLINE} –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω`);
        } catch (error) {
            TelegramService.sendMessage(chatId, `${CONFIG.EMOJIS.CRITICAL} –û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏: ${error.message}`);
        }
    }
    
    static async handleRestartProcess(msg) {
        const chatId = msg.chat.id;
        if (String(chatId) !== String(CONFIG.CHAT_ID)) return;
        
        try {
            await TelegramService.sendMessage(chatId, `${CONFIG.EMOJIS.INFO} –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –ø—Ä–æ—Ü–µ—Å—Å...`);
            await Pm2Manager.controlProcess('restart');
            TelegramService.sendMessage(chatId, `${CONFIG.EMOJIS.RESTART} –ü—Ä–æ—Ü–µ—Å—Å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω`);
        } catch (error) {
            TelegramService.sendMessage(chatId, `${CONFIG.EMOJIS.CRITICAL} –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞: ${error.message}`);
        }
    }
}

// ============== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ==============
async function initializeApp() {
    try {
        // –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PM2
        await Pm2Manager.connect();
        Pm2Manager.setupEventBus();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤
        LogMonitor.initialize();
        
        // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
        BotCommands.initialize();
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–∏—Å—Ç–µ–º—ã
        setInterval(async () => {
            try {
                const { message, hasProblems } = await SystemMonitor.checkSystemHealth();
                if (hasProblems) {
                    await TelegramService.sendMessage(CONFIG.CHAT_ID, message);
                }
            } catch (error) {
                Logger.error(`–û—à–∏–±–∫–∞ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: ${error.message}`);
            }
        }, CONFIG.INTERVALS.SYSTEM_CHECK);
        
        Logger.log('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ');
        TelegramService.sendMessage(CONFIG.CHAT_ID, `${CONFIG.EMOJIS.ONLINE} *–ë–æ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω!*\n\n–°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ`);
    } catch (error) {
        Logger.error(`–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: ${error.message}`);
        process.exit(1);
    }
}

// –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
initializeApp();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', error => {
    Logger.error(`–û—à–∏–±–∫–∞ polling: ${error.code} - ${error.message}`);
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞
process.on('SIGINT', () => {
    Logger.log('–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    pm2.disconnect();
    bot.stopPolling();
    process.exit();
});