const axios = require('axios');
const fs = require('fs');
const path = require('path');
const chokidar = require('chokidar');
const TelegramBot = require('node-telegram-bot-api');
const pm2 = require('pm2');

// *** –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï ***
const BOT_TOKEN = '8127032296:AAH7Vxg7v5I_6M94oZbidNvtyPEAFQVEPds'; // –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const CHAT_ID = '1364079703';     // –í–∞—à Chat ID (–º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π)
const PM2_APP_NAME = 'server-site'; // –ò–º—è –≤–∞—à–µ–≥–æ PM2-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// ******************************

// –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º –ª–æ–≥–æ–≤ PM2
const LOG_FILE_OUT = '/root/.pm2/logs/server-site-out.log';
const LOG_FILE_ERR = '/root/.pm2/logs/server-site-error.log';

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
const CRITICAL_KEYWORDS = ['error', 'fatal', 'critical', 'exception', 'failed', 'timeout', 'denied', 'unauthorized', 'segfault'];
const WARNING_KEYWORDS = ['warn', 'warning', 'deprecated', 'unstable', 'notice'];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥ ---
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üìä –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' }],
            [{ text: 'üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (20 —Å—Ç—Ä–æ–∫)' }],
            [{ text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' }],
            [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞' }]
        ],
        resize_keyboard: true // –£–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
    }
};

const logsKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üìù 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤' }, { text: 'üìù 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤' }],
            [{ text: 'üìù 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤' }, { text: 'üìù 100 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤' }],
            [{ text: 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é' }]
        ],
        resize_keyboard: true
    }
};

const settingsKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' }, { text: 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' }],
            [{ text: 'üö® –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ' }, { text: '‚ÑπÔ∏è –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' }],
            [{ text: 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é' }]
        ],
        resize_keyboard: true
    }
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ (–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞, —Å–µ–π—á–∞—Å –≤ –ø–∞–º—è—Ç–∏)
let botState = {
    notificationsEnabled: true,
    notificationLevel: 'all' // 'all' –∏–ª–∏ 'critical'
};

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ ---

// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã MarkdownV2 –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ MarkdownV2 —Å–æ–æ–±—â–µ–Ω–∏—è,
// –Ω–æ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —Å–∞–º–æ–π —Ä–∞–∑–º–µ—Ç–∫–∏.
const escapeMarkdownV2Text = (str) => {
    if (typeof str !== 'string') return ''; // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    return str.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
};

// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML-—Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã –¥–ª—è —Ç–µ–∫—Å—Ç–∞, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –≤–Ω—É—Ç—Ä–∏ <pre> –∏–ª–∏ <code>
const escapeHtml = (str) => {
    if (typeof str !== 'string') return ''; // –ó–∞—â–∏—Ç–∞ –æ—Ç –Ω–µ—Å—Ç—Ä–æ–∫–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    return str.replace(/&/g, '&amp;')
               .replace(/</g, '&lt;')
               .replace(/>/g, '&gt;');
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π, —Ä–∞–∑–¥–µ–ª—è—é—â–∞—è –∏—Ö –Ω–∞ —á–∞—Å—Ç–∏
// –ü—Ä–∏–Ω–∏–º–∞–µ—Ç parseMode –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä (–∏–ª–∏ undefined –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞)
async function sendLongMessage(chatId, text, options = {}) {
    // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç undefined, null –∏–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–µ–≤—Ä–∞—â–∞–µ–º –≤ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
    const messageText = typeof text === 'string' ? text : String(text || '');

    // –ï—Å–ª–∏ forceSend –Ω–µ —É–∫–∞–∑–∞–Ω –∏ —Ç–µ–∫—Å—Ç –ø—É—Å—Ç–æ–π –ø–æ—Å–ª–µ –æ–±—Ä–µ–∑–∫–∏ –ø—Ä–æ–±–µ–ª–æ–≤, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if (!options.forceSend && messageText.trim() === '') {
        console.log('Attempted to send empty message, skipped.');
        return;
    }

    const MAX_MESSAGE_LENGTH = 4096; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram (4096 –¥–ª—è Markdown/HTML, 4000 –¥–ª—è Text)
    let parts = [];
    let remainingText = messageText;

    while (remainingText.length > 0) {
        let part = remainingText.substring(0, MAX_MESSAGE_LENGTH);
        let lastNewline = part.lastIndexOf('\n');

        // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–±–∏—Ç—å –ø–æ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ —á–∞—Å—Ç—å —Ç–æ—á–Ω–æ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ –∏–ª–∏ –±–æ–ª—å—à–µ
        if (lastNewline !== -1 && part.length === MAX_MESSAGE_LENGTH) {
            part = part.substring(0, lastNewline);
            remainingText = remainingText.substring(lastNewline + 1);
        } else {
            remainingText = remainingText.substring(MAX_MESSAGE_LENGTH);
        }
        parts.push(part);
    }

    for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        try {
            // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å, –ø–µ—Ä–µ–¥–∞–µ–º reply_markup
            const currentOptions = (i === parts.length - 1) ? { ...options } : { parse_mode: options.parse_mode };
            await bot.sendMessage(chatId, part, currentOptions);
        } catch (error) {
            console.error('Error sending message part:', error.response ? error.response.data : error.message);
            // –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            if (options.parse_mode && error.response && error.response.data && error.response.data.description && error.response.data.description.includes("can't parse entities")) {
                console.warn('Attempting to send as plain text due to MarkdownV2/HTML parsing error.');
                try {
                    const plainTextOptions = (i === parts.length - 1) ? { reply_markup: options.reply_markup } : {};
                    await bot.sendMessage(chatId, part, plainTextOptions);
                } catch (fallbackError) {
                    console.error('Fallback to plain text also failed:', fallbackError.response ? fallbackError.response.data : fallbackError.message);
                }
            } else {
                 // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                console.error('Failed to send message part even after retries or with other error types.');
            }
        }
    }
}


// --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ ---

let lastReadOutPosition = 0;
let lastReadErrPosition = 0;

console.log(`Watching for logs from: ${LOG_FILE_OUT} and ${LOG_FILE_ERR}`);

function checkLogForKeywords(logLine) {
    const lowerCaseLine = logLine.toLowerCase();
    for (const keyword of CRITICAL_KEYWORDS) {
        if (lowerCaseLine.includes(keyword)) return 'CRITICAL';
    }
    for (const keyword of WARNING_KEYWORDS) {
        if (lowerCaseLine.includes(keyword)) return 'WARNING';
    }
    return null;
}

function processLogFile(filePath, lastPositionRef, type) {
    fs.stat(filePath, (err, stats) => {
        if (err) {
            console.error(`Error stat-ing file ${filePath}:`, err.message);
            return;
        }

        const currentSize = stats.size;
        if (currentSize < lastPositionRef.value) {
            console.log(`Log file ${filePath} was truncated. Reading from start.`);
            lastPositionRef.value = 0;
        }

        if (currentSize > lastPositionRef.value) {
            const stream = fs.createReadStream(filePath, { start: lastPositionRef.value, encoding: 'utf8' });
            let buffer = '';
            let unprocessedLines = '';

            stream.on('data', (chunk) => {
                const lines = (unprocessedLines + chunk).split('\n');
                unprocessedLines = lines.pop();

                for (const line of lines) {
                    if (line.trim() === '') continue;

                    if (botState.notificationsEnabled) {
                        const alertType = checkLogForKeywords(line);
                        if (alertType && (botState.notificationLevel === 'all' || alertType === 'CRITICAL')) {
                            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å MarkdownV2
                            sendLongMessage(CHAT_ID, `${alertType === 'CRITICAL' ? 'üö®' : '‚ö†Ô∏è'} *${escapeMarkdownV2Text(alertType)} ALERT* (${escapeMarkdownV2Text(PM2_APP_NAME)}):`, { parse_mode: 'MarkdownV2' });
                            // –°–∞–º –ª–æ–≥ –≤ HTML <pre>, —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º HTML
                            sendLongMessage(CHAT_ID, `<pre>${escapeHtml(line)}</pre>`, { parse_mode: 'HTML' });
                        }
                    }
                }
            });

            stream.on('end', () => {
                if (unprocessedLines.trim() !== '') {
                    if (botState.notificationsEnabled) {
                        const alertType = checkLogForKeywords(unprocessedLines);
                        if (alertType && (botState.notificationLevel === 'all' || alertType === 'CRITICAL')) {
                            sendLongMessage(CHAT_ID, `${alertType === 'CRITICAL' ? 'üö®' : '‚ö†Ô∏è'} *${escapeMarkdownV2Text(alertType)} ALERT* (${escapeMarkdownV2Text(PM2_APP_NAME)}):`, { parse_mode: 'MarkdownV2' });
                            sendLongMessage(CHAT_ID, `<pre>${escapeHtml(unprocessedLines)}</pre>`, { parse_mode: 'HTML' });
                        }
                    }
                }
                lastPositionRef.value = currentSize;
            });

            stream.on('error', (readErr) => {
                console.error(`Error reading from file ${filePath}:`, readErr.message);
            });
        }
    });
}

const lastPositionOut = { value: 0 };
const lastPositionErr = { value: 0 };

function initializeLogPositions() {
    [LOG_FILE_OUT, LOG_FILE_ERR].forEach(filePath => {
        if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            if (filePath === LOG_FILE_OUT) lastPositionOut.value = stats.size;
            if (filePath === LOG_FILE_ERR) lastPositionErr.value = stats.size;
            console.log(`Initial position for ${filePath}: ${stats.size}`);
        } else {
            console.warn(`Log file not found: ${filePath}`);
        }
    });
}

initializeLogPositions();

const watcher = chokidar.watch([LOG_FILE_OUT, LOG_FILE_ERR], {
    persistent: true,
    ignoreInitial: true,
    awaitWriteFinish: {
        stabilityThreshold: 2000,
        pollInterval: 100
    }
});

watcher
    .on('add', (filePath) => {
        if (filePath === LOG_FILE_OUT) lastPositionOut.value = 0;
        if (filePath === LOG_FILE_ERR) lastPositionErr.value = 0;
        processLogFile(filePath, filePath === LOG_FILE_OUT ? lastPositionOut : lastPositionErr, filePath === LOG_FILE_OUT ? 'out' : 'err');
    })
    .on('change', (filePath) => {
        processLogFile(filePath, filePath === LOG_FILE_OUT ? lastPositionOut : lastPositionErr, filePath === LOG_FILE_OUT ? 'out' : 'err');
    })
    .on('error', (error) => console.error(`Watcher error: ${error}`));

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }

    const welcomeMsg = `üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è* \`${escapeMarkdownV2Text(PM2_APP_NAME)}\`\\.\n\n` +
                       `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é\\.`;

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å MarkdownV2 –∏ –≥–ª–∞–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    sendLongMessage(chatId, welcomeMsg, {
        parse_mode: 'MarkdownV2',
        ...mainKeyboard
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }

    const text = msg.text;

    // –í–∫–ª—é—á–∞–µ–º "–ø–µ—á–∞—Ç–Ω—ã–π" —Ä–µ–∂–∏–º, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª, —á—Ç–æ –±–æ—Ç —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–µ—Ç
    bot.sendChatAction(chatId, 'typing');

    switch(text) {
        case 'üìä –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è':
            checkPm2Status(chatId);
            break;

        case 'üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (20 —Å—Ç—Ä–æ–∫)':
            fetchLogs(chatId, 20, logsKeyboard); // –ü–µ—Ä–µ–¥–∞–µ–º logsKeyboard –¥–ª—è –ø–æ–∫–∞–∑–∞ –ø–æ—Å–ª–µ –ª–æ–≥–æ–≤
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:', logsKeyboard);
            break;

        case 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ':
            restartApplication(chatId);
            break;

        case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞':
            const settingsMessage = `*–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\n` +
                                    `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: *${botState.notificationsEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}*\n` +
                                    `üì¢ –£—Ä–æ–≤–µ–Ω—å: *${botState.notificationLevel === 'all' ? '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : '–¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ'}*`;
            sendLongMessage(chatId, settingsMessage, {
                parse_mode: 'MarkdownV2',
                ...settingsKeyboard
            });
            break;

        case 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
            botState.notificationsEnabled = true;
            sendLongMessage(chatId, 'üîî *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã*\\.', { parse_mode: 'MarkdownV2', ...settingsKeyboard });
            break;

        case 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
            botState.notificationsEnabled = false;
            sendLongMessage(chatId, 'üîï *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã*\\.', { parse_mode: 'MarkdownV2', ...settingsKeyboard });
            break;

        case 'üö® –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ':
            botState.notificationLevel = 'critical';
            sendLongMessage(chatId, 'üö® *–ë—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\\.', { parse_mode: 'MarkdownV2', ...settingsKeyboard });
            break;

        case '‚ÑπÔ∏è –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
            botState.notificationLevel = 'all';
            sendLongMessage(chatId, '‚ÑπÔ∏è *–ë—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è*\\.', { parse_mode: 'MarkdownV2', ...settingsKeyboard });
            break;

        case 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            sendLongMessage(chatId, '*–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:*', { parse_mode: 'MarkdownV2', ...mainKeyboard });
            break;

        case 'üìù 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤':
            fetchLogs(chatId, 10, logsKeyboard);
            break;

        case 'üìù 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤':
            fetchLogs(chatId, 20, logsKeyboard);
            break;

        case 'üìù 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤':
            fetchLogs(chatId, 50, logsKeyboard);
            break;

        case 'üìù 100 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤':
            fetchLogs(chatId, 100, logsKeyboard);
            break;

        default:
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
            if (text.startsWith('/')) {
                handleCommand(chatId, text);
            } else {
                sendLongMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\\.', { parse_mode: 'MarkdownV2', ...mainKeyboard });
            }
            break;
    }
});

function handleCommand(chatId, command) {
    if (command.match(/^\/logs(?:@\w+)?(?:\s+(\d+))?$/)) {
        const match = command.match(/^\/logs(?:@\w+)?(?:\s+(\d+))?$/);
        const linesToFetch = match[1] ? parseInt(match[1], 10) : 20;
        fetchLogs(chatId, linesToFetch, mainKeyboard); // –ü–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /logs –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –Ω–∞ –≥–ª–∞–≤–Ω—É—é
    } else if (command.match(/^\/status$/)) {
        checkPm2Status(chatId);
    } else if (command.match(/^\/restart_server_site$/)) {
        restartApplication(chatId);
    } else if (command.match(/^\/start$/)) {
        // –ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω—ã–º bot.onText
    } else {
        sendLongMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞\\. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\\.', { parse_mode: 'MarkdownV2', ...mainKeyboard });
    }
}

// –î–æ–±–∞–≤–∏–ª–∏ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä keyboardToSendAfterLogs
function fetchLogs(chatId, linesToFetch, keyboardToSendAfterLogs = null) {
    if (isNaN(linesToFetch) || linesToFetch <= 0) {
        sendLongMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ \\(–Ω–∞–ø—Ä–∏–º–µ—Ä: `/logs 50`\\)\\.', { parse_mode: 'MarkdownV2' });
        return;
    }

    sendLongMessage(chatId, `üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ *${linesToFetch}* —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –¥–ª—è \`${escapeMarkdownV2Text(PM2_APP_NAME)}\`\\.\\.\\.`, { parse_mode: 'MarkdownV2' });

    readLastLines(LOG_FILE_OUT, linesToFetch, async (err, outLogs) => {
        if (err) {
            await sendLongMessage(chatId, `üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ OUT –ª–æ–≥–æ–≤:* ${escapeMarkdownV2Text(err.message)}\\.`, { parse_mode: 'MarkdownV2' });
            return;
        }
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ OUT –ª–æ–≥–∞
        await sendLongMessage(chatId, `üìã *OUT –ª–æ–≥ \\(${escapeMarkdownV2Text(PM2_APP_NAME)} \\- –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${linesToFetch} —Å—Ç—Ä–æ–∫\\):*`, { parse_mode: 'MarkdownV2' });
        // –°–∞–º –ª–æ–≥ –≤ HTML <pre>
        await sendLongMessage(chatId, `<pre>${escapeHtml(outLogs || '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ OUT –ª–æ–≥–µ\\.')}</pre>`, { parse_mode: 'HTML' });
    });

    readLastLines(LOG_FILE_ERR, linesToFetch, async (err, errLogs) => {
        if (err) {
            await sendLongMessage(chatId, `üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ERR –ª–æ–≥–æ–≤:* ${escapeMarkdownV2Text(err.message)}\\.`, { parse_mode: 'MarkdownV2' });
            return;
        }
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ ERR –ª–æ–≥–∞
        await sendLongMessage(chatId, `üî• *ERR –ª–æ–≥ \\(${escapeMarkdownV2Text(PM2_APP_NAME)} \\- –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${linesToFetch} —Å—Ç—Ä–æ–∫\\):*`, { parse_mode: 'MarkdownV2' });
        // –°–∞–º –ª–æ–≥ –≤ HTML <pre> –∏ —Å –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        await sendLongMessage(chatId, `<pre>${escapeHtml(errLogs || '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ ERR –ª–æ–≥–µ\\.')}</pre>`, { parse_mode: 'HTML', ...(keyboardToSendAfterLogs || mainKeyboard) });
    });
}

function readLastLines(filePath, numLines, callback) {
    if (!fs.existsSync(filePath)) {
        return callback(null, `–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }

    fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) return callback(err);
        const lines = data.split('\n').filter(line => line.trim() !== '');
        const lastLines = lines.slice(-numLines);
        callback(null, lastLines.join('\n'));
    });
}

function checkPm2Status(chatId) {
    pm2.list((err, list) => {
        if (err) {
            sendLongMessage(chatId, `üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ PM2:* ${escapeMarkdownV2Text(err.message)}\\.`, { parse_mode: 'MarkdownV2', ...mainKeyboard });
            console.error('Error listing PM2 processes:', err.message);
            return;
        }

        const app = list.find(p => p.name === PM2_APP_NAME);

        if (app) {
            let statusMessage = `üìä *–°—Ç–∞—Ç—É—Å* \`${escapeMarkdownV2Text(PM2_APP_NAME)}\`\\:\n\n`;
            statusMessage += `üîπ *–°–æ—Å—Ç–æ—è–Ω–∏–µ:* \`${escapeMarkdownV2Text(app.pm2_env.status)}\`\n`;
            statusMessage += `üîπ *Uptime:* \`${app.pm2_env.pm_uptime ? (Math.round((Date.now() - app.pm2_env.pm_uptime) / 1000 / 60)) + ' –º–∏–Ω' : 'N/A'}\`\n`;
            statusMessage += `üîπ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤:* \`${app.pm2_env.restart_time}\`\n`;
            statusMessage += `üîπ *–ü–∞–º—è—Ç—å:* \`${(app.monit.memory / 1024 / 1024).toFixed(2)} MB\`\n`;
            statusMessage += `üîπ *CPU:* \`${app.monit.cpu}%\`\n`;

            sendLongMessage(chatId, statusMessage, {
                parse_mode: 'MarkdownV2',
                ...mainKeyboard
            });
        } else {
            sendLongMessage(chatId, `ü§∑‚Äç‚ôÇÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ \`${escapeMarkdownV2Text(PM2_APP_NAME)}\` –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ PM2\\. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–ª–∏ –∏–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ\\.`, { parse_mode: 'MarkdownV2', ...mainKeyboard });
        }
    });
}

function restartApplication(chatId) {
    sendLongMessage(chatId, `üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ \`${escapeMarkdownV2Text(PM2_APP_NAME)}\`\\.\\.\\.`, { parse_mode: 'MarkdownV2' });

    pm2.restart(PM2_APP_NAME, (err, apps) => {
        if (err) {
            console.error(`Error restarting ${PM2_APP_NAME}:`, err.message);
            sendLongMessage(chatId, `üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ* \`${escapeMarkdownV2Text(PM2_APP_NAME)}\`\\: ${escapeMarkdownV2Text(err.message)}\\.`, { parse_mode: 'MarkdownV2', ...mainKeyboard });
            return;
        }
        sendLongMessage(chatId, `‚úÖ \`${escapeMarkdownV2Text(PM2_APP_NAME)}\` *—É—Å–ø–µ—à–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫*\\.\\n–û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç PM2\\.`, { parse_mode: 'MarkdownV2', ...mainKeyboard });
    });
}

// --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è PM2 ---

pm2.connect(function(err) {
    if (err) {
        console.error('Error connecting to PM2:', err.message);
        sendLongMessage(CHAT_ID, `üî¥ *–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ PM2:* ${escapeMarkdownV2Text(err.message)}\\.`, { parse_mode: 'MarkdownV2' });
        return;
    }

    console.log('Connected to PM2 daemon.');

    pm2.launchBus(function(err, bus) {
        if (err) {
            console.error('Error launching PM2 bus:', err.message);
            sendLongMessage(CHAT_ID, `üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π PM2:* ${escapeMarkdownV2Text(err.message)}\\.`, { parse_mode: 'MarkdownV2' });
            return;
        }

        bus.on('process:event', function(data) {
            if (data.process.name === PM2_APP_NAME && botState.notificationsEnabled) {
                let message = `üìä *PM2 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è* \`${escapeMarkdownV2Text(PM2_APP_NAME)}\`\\:\n\n`;
                const escapedStatus = escapeMarkdownV2Text(data.process.status);
                const escapedEvent = escapeMarkdownV2Text(data.event);

                switch (data.event) {
                    case 'stop':
                        message += `üî¥ *–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –û–°–¢–ê–ù–û–í–õ–ï–ù–û!* \\(Status: \`${escapedStatus}\`\\)`;
                        break;
                    case 'restart':
                        message += `üü° *–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù–û!* \\(Status: \`${escapedStatus}\`\\)`;
                        break;
                    case 'exit':
                        message += `üíî *–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –í–´–®–õ–û –ò–ó –°–¢–†–û–Ø!* \\(Status: \`${escapedStatus}\`\\)`;
                        break;
                    case 'online':
                        message += `üü¢ *–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û –ò –†–ê–ë–û–¢–ê–ï–¢!* \\(Status: \`${escapedStatus}\`\\)`;
                        break;
                    default:
                        message += `‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: \`${escapedEvent}\` \\(Status: \`${escapedStatus}\`\\)`;
                        break;
                }
                sendLongMessage(CHAT_ID, message, { parse_mode: 'MarkdownV2' });
            }
        });
    });
});

console.log('PM2 Log & Status Telegram Bot is running and listening for commands and events...');

bot.on('polling_error', (error) => {
    console.error('Polling error:', error.code, error.message);
});