const axios = require('axios');
const fs = require('fs');
const path = require('path');
const chokidar = require('chokidar');
const TelegramBot = require('node-telegram-bot-api');
const pm2 = require('pm2');

// *** –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï ***
const BOT_TOKEN = '8127032296:AAH7Vxg7v5I_6M94oZbidNvtyPEAFQVEPds';
const CHAT_ID = '1364079703';
const PM2_APP_NAME = 'server-site';
// ******************************

const LOG_FILE_OUT = '/root/.pm2/logs/server-site-out.log';
const LOG_FILE_ERR = '/root/.pm2/logs/server-site-error.log';

const CRITICAL_KEYWORDS = ['error', 'fatal', 'critical', 'exception', 'failed', 'timeout', 'denied', 'unauthorized', 'segfault'];
const WARNING_KEYWORDS = ['warn', 'warning', 'deprecated', 'unstable', 'notice'];

const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∫–æ–º–∞–Ω–¥
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üìä –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' }],
            [{ text: 'üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (20 —Å—Ç—Ä–æ–∫)' }],
            [{ text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ' }],
            [{ text: '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞' }]
        ],
        resize_keyboard: true
    }
};

const logsKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üìù 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤' }, { text: 'üìù 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤' }],
            [{ text: 'üìù 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤' }, { text: 'üìù 100 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤' }],
            [{ text: 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é' }]
        ],
        resize_keyboard: true
    }
};

const settingsKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' }, { text: 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' }],
            [{ text: 'üö® –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ' }, { text: '‚ÑπÔ∏è –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' }],
            [{ text: 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é' }]
        ],
        resize_keyboard: true
    }
};

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ (–º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –≤ –ë–î –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω—Å—Ç–≤–∞)
let botState = {
    notificationsEnabled: true,
    notificationLevel: 'all' // 'all' –∏–ª–∏ 'critical'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async function sendTelegramMessage(chatId, text, forceSend = false, options = {}) {
    if (!text.trim() && !forceSend) return;
    
    const MAX_MESSAGE_LENGTH = 4000;
    let parts = [];
    let remainingText = text;

    while (remainingText.length > 0) {
        let part = remainingText.substring(0, MAX_MESSAGE_LENGTH);
        let lastNewline = part.lastIndexOf('\n');
        if (lastNewline !== -1 && lastNewline !== part.length - 1 && remainingText.length > MAX_MESSAGE_LENGTH) {
            part = part.substring(0, lastNewline);
            remainingText = remainingText.substring(lastNewline + 1);
        } else {
            remainingText = remainingText.substring(MAX_MESSAGE_LENGTH);
        }
        parts.push(part);
    }

    for (const part of parts) {
        try {
            await bot.sendMessage(chatId, `\`\`\`\n${part}\n\`\`\``, { 
                parse_mode: 'MarkdownV2',
                ...options 
            });
        } catch (error) {
            console.error('Error sending message:', error.message);
            try {
                await bot.sendMessage(chatId, part, options);
            } catch (fallbackError) {
                console.error('Fallback send failed:', fallbackError.message);
            }
        }
    }
}

// --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ª–æ–≥–æ–≤ ---

let lastReadOutPosition = 0;
let lastReadErrPosition = 0;

function checkLogForKeywords(logLine) {
    const lowerCaseLine = logLine.toLowerCase();
    for (const keyword of CRITICAL_KEYWORDS) {
        if (lowerCaseLine.includes(keyword)) return 'CRITICAL';
    }
    for (const keyword of WARNING_KEYWORDS) {
        if (lowerCaseLine.includes(keyword)) return 'WARNING';
    }
    return null;
}

function processLogFile(filePath, lastPositionRef, type) {
    fs.stat(filePath, (err, stats) => {
        if (err) {
            console.error(`Error stat-ing file ${filePath}:`, err.message);
            return;
        }

        const currentSize = stats.size;
        if (currentSize < lastPositionRef.value) {
            console.log(`Log file ${filePath} was truncated. Reading from start.`);
            lastPositionRef.value = 0;
        }

        if (currentSize > lastPositionRef.value) {
            const stream = fs.createReadStream(filePath, { start: lastPositionRef.value, encoding: 'utf8' });
            let buffer = '';
            let unprocessedLines = '';

            stream.on('data', (chunk) => {
                const lines = (unprocessedLines + chunk).split('\n');
                unprocessedLines = lines.pop();

                for (const line of lines) {
                    if (line.trim() === '') continue;

                    if (botState.notificationsEnabled) {
                        const alertType = checkLogForKeywords(line);
                        if (alertType && (botState.notificationLevel === 'all' || alertType === 'CRITICAL')) {
                            sendTelegramMessage(CHAT_ID, `üö® ${alertType} (${PM2_APP_NAME})\n\`\`\`\n${line}\n\`\`\``);
                        }
                    }
                }
            });

            stream.on('end', () => {
                if (unprocessedLines.trim() !== '') {
                    const alertType = checkLogForKeywords(unprocessedLines);
                    if (alertType && (botState.notificationLevel === 'all' || alertType === 'CRITICAL')) {
                        sendTelegramMessage(CHAT_ID, `üö® ${alertType} (${PM2_APP_NAME})\n\`\`\`\n${unprocessedLines}\n\`\`\``);
                    }
                }
                lastPositionRef.value = currentSize;
            });

            stream.on('error', (readErr) => {
                console.error(`Error reading from file ${filePath}:`, readErr.message);
            });
        }
    });
}

const lastPositionOut = { value: 0 };
const lastPositionErr = { value: 0 };

function initializeLogPositions() {
    [LOG_FILE_OUT, LOG_FILE_ERR].forEach(filePath => {
        if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            if (filePath === LOG_FILE_OUT) lastPositionOut.value = stats.size;
            if (filePath === LOG_FILE_ERR) lastPositionErr.value = stats.size;
        } else {
            console.warn(`Log file not found: ${filePath}`);
        }
    });
}

initializeLogPositions();

const watcher = chokidar.watch([LOG_FILE_OUT, LOG_FILE_ERR], {
    persistent: true,
    ignoreInitial: true,
    awaitWriteFinish: {
        stabilityThreshold: 2000,
        pollInterval: 100
    }
});

watcher
    .on('add', (filePath) => {
        if (filePath === LOG_FILE_OUT) lastPositionOut.value = 0;
        if (filePath === LOG_FILE_ERR) lastPositionErr.value = 0;
        processLogFile(filePath, filePath === LOG_FILE_OUT ? lastPositionOut : lastPositionErr, filePath === LOG_FILE_OUT ? 'out' : 'err');
    })
    .on('change', (filePath) => {
        processLogFile(filePath, filePath === LOG_FILE_OUT ? lastPositionOut : lastPositionErr, filePath === LOG_FILE_OUT ? 'out' : 'err');
    })
    .on('error', (error) => console.error(`Watcher error: ${error}`));

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }
    
    const welcomeMsg = `üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è *${PM2_APP_NAME}*.\n\n` +
                      `–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤—Ä—É—á–Ω—É—é.`;
    
    bot.sendMessage(chatId, welcomeMsg, {
        parse_mode: 'Markdown',
        ...mainKeyboard
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫–Ω–æ–ø–æ–∫)
bot.on('message', (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }

    const text = msg.text;
    
    switch(text) {
        case 'üìä –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è':
            checkPm2Status(chatId);
            break;
            
        case 'üìù –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–∏ (20 —Å—Ç—Ä–æ–∫)':
            fetchLogs(chatId, 20);
            bot.sendMessage(chatId, '–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:', logsKeyboard);
            break;
            
        case 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ':
            restartApplication(chatId);
            break;
            
        case '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞':
            bot.sendMessage(chatId, `–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n` +
                                  `üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: ${botState.notificationsEnabled ? '–í–∫–ª—é—á–µ–Ω—ã' : '–í—ã–∫–ª—é—á–µ–Ω—ã'}\n` +
                                  `üì¢ –£—Ä–æ–≤–µ–Ω—å: ${botState.notificationLevel === 'all' ? '–í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è' : '–¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ'}`, 
                                  settingsKeyboard);
            break;
            
        case 'üîî –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
            botState.notificationsEnabled = true;
            bot.sendMessage(chatId, 'üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã', settingsKeyboard);
            break;
            
        case 'üîï –í—ã–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
            botState.notificationsEnabled = false;
            bot.sendMessage(chatId, 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—ã–∫–ª—é—á–µ–Ω—ã', settingsKeyboard);
            break;
            
        case 'üö® –¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ':
            botState.notificationLevel = 'critical';
            bot.sendMessage(chatId, 'üö® –ë—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', settingsKeyboard);
            break;
            
        case '‚ÑπÔ∏è –í—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è':
            botState.notificationLevel = 'all';
            bot.sendMessage(chatId, '‚ÑπÔ∏è –ë—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è', settingsKeyboard);
            break;
            
        case 'üîô –ù–∞ –≥–ª–∞–≤–Ω—É—é':
            bot.sendMessage(chatId, '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:', mainKeyboard);
            break;
            
        case 'üìù 10 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤':
            fetchLogs(chatId, 10);
            break;
            
        case 'üìù 20 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤':
            fetchLogs(chatId, 20);
            break;
            
        case 'üìù 50 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤':
            fetchLogs(chatId, 50);
            break;
            
        case 'üìù 100 —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤':
            fetchLogs(chatId, 100);
            break;
            
        default:
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –≤—Ä—É—á–Ω—É—é, –µ—Å–ª–∏ –Ω–µ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞
            if (text.startsWith('/')) {
                handleCommand(chatId, text);
            }
            break;
    }
});

function handleCommand(chatId, command) {
    if (command.match(/^\/logs(?:@\w+)?(?:\s+(\d+))?$/)) {
        const match = command.match(/^\/logs(?:@\w+)?(?:\s+(\d+))?$/);
        const linesToFetch = match[1] ? parseInt(match[1], 10) : 20;
        fetchLogs(chatId, linesToFetch);
    } else if (command.match(/^\/status$/)) {
        checkPm2Status(chatId);
    } else if (command.match(/^\/restart_server_site$/)) {
        restartApplication(chatId);
    } else {
        bot.sendMessage(chatId, '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è.', mainKeyboard);
    }
}

function fetchLogs(chatId, linesToFetch) {
    if (isNaN(linesToFetch) || linesToFetch <= 0) {
        sendTelegramMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /logs 50)');
        return;
    }

    sendTelegramMessage(chatId, `–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${linesToFetch} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –¥–ª—è ${PM2_APP_NAME}...`);

    readLastLines(LOG_FILE_OUT, linesToFetch, async (err, outLogs) => {
        if (err) {
            await sendTelegramMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ OUT –ª–æ–≥–æ–≤: ${err.message}`);
            return;
        }
        await sendTelegramMessage(chatId, `[OUT - ${PM2_APP_NAME} - –ó–ê–ü–†–û–° ${linesToFetch}]\n${outLogs || '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ OUT –ª–æ–≥–µ.'}`);
    });

    readLastLines(LOG_FILE_ERR, linesToFetch, async (err, errLogs) => {
        if (err) {
            await sendTelegramMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ERR –ª–æ–≥–æ–≤: ${err.message}`);
            return;
        }
        await sendTelegramMessage(chatId, `[ERR - ${PM2_APP_NAME} - –ó–ê–ü–†–û–° ${linesToFetch}]\n${errLogs || '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ ERR –ª–æ–≥–µ.'}`);
    });
}

function readLastLines(filePath, numLines, callback) {
    if (!fs.existsSync(filePath)) {
        return callback(null, `–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }

    fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) return callback(err);
        const lines = data.split('\n').filter(line => line.trim() !== '');
        const lastLines = lines.slice(-numLines);
        callback(null, lastLines.join('\n'));
    });
}

function checkPm2Status(chatId) {
    pm2.list((err, list) => {
        if (err) {
            sendTelegramMessage(chatId, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ PM2: ${err.message}`);
            console.error('Error listing PM2 processes:', err.message);
            return;
        }

        const app = list.find(p => p.name === PM2_APP_NAME);

        if (app) {
            let statusMessage = `üìä *–°—Ç–∞—Ç—É—Å ${PM2_APP_NAME}:*\n\n`;
            statusMessage += `üîπ *–°—Ç–∞—Ç—É—Å:* ${app.pm2_env.status}\n`;
            statusMessage += `üîπ *Uptime:* ${app.pm2_env.pm_uptime ? (Math.round((Date.now() - app.pm2_env.pm_uptime) / 1000 / 60)) + ' –º–∏–Ω' : 'N/A'}\n`;
            statusMessage += `üîπ *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤:* ${app.pm2_env.restart_time}\n`;
            statusMessage += `üîπ *–ü–∞–º—è—Ç—å:* ${(app.monit.memory / 1024 / 1024).toFixed(2)} MB\n`;
            statusMessage += `üîπ *CPU:* ${app.monit.cpu}%\n`;
            
            bot.sendMessage(chatId, statusMessage, {
                parse_mode: 'Markdown',
                ...mainKeyboard
            });
        } else {
            sendTelegramMessage(chatId, `–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${PM2_APP_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ PM2.`, mainKeyboard);
        }
    });
}

function restartApplication(chatId) {
    sendTelegramMessage(chatId, `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ ${PM2_APP_NAME}...`);

    pm2.restart(PM2_APP_NAME, (err, apps) => {
        if (err) {
            console.error(`Error restarting ${PM2_APP_NAME}:`, err.message);
            sendTelegramMessage(chatId, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ${PM2_APP_NAME}: ${err.message}`, false, mainKeyboard);
            return;
        }
        sendTelegramMessage(chatId, `üü¢ ${PM2_APP_NAME} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.`, false, mainKeyboard);
    });
}

// --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è PM2 ---

pm2.connect(function(err) {
    if (err) {
        console.error('Error connecting to PM2:', err.message);
        sendTelegramMessage(CHAT_ID, `üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ PM2: ${err.message}`, true);
        return;
    }

    pm2.launchBus(function(err, bus) {
        if (err) {
            console.error('Error launching PM2 bus:', err.message);
            sendTelegramMessage(CHAT_ID, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π PM2: ${err.message}`, true);
            return;
        }

        bus.on('process:event', function(data) {
            if (data.process.name === PM2_APP_NAME && botState.notificationsEnabled) {
                let message = `üìä *PM2 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${PM2_APP_NAME}:* \n\n`;
                switch (data.event) {
                    case 'stop':
                        message += `üî¥ *–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –û–°–¢–ê–ù–û–í–õ–ï–ù–û!* (Status: ${data.process.status})`;
                        break;
                    case 'restart':
                        message += `üü° *–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù–û!* (Status: ${data.process.status})`;
                        break;
                    case 'exit':
                        message += `üíî *–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –í–´–®–õ–û –ò–ó –°–¢–†–û–Ø!* (Status: ${data.process.status})`;
                        break;
                    case 'online':
                        message += `üü¢ *–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û –ò –†–ê–ë–û–¢–ê–ï–¢!* (Status: ${data.process.status})`;
                        break;
                    default:
                        message += `‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${data.event} (Status: ${data.process.status})`;
                        break;
                }
                sendTelegramMessage(CHAT_ID, message, true, mainKeyboard);
            }
        });
    });
});

console.log('PM2 Log & Status Telegram Bot is running and listening for commands and events...');

bot.on('polling_error', (error) => {
    console.error('Polling error:', error.code, error.message);
});