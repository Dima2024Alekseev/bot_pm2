const axios = require('axios');
const fs = require('fs');
const path = require('path');
const chokidar = require('chokidar');
const TelegramBot = require('node-telegram-bot-api');
const pm2 = require('pm2');
const { getDrives } = require('node-disk-info');

// *** –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï ***
const BOT_TOKEN = '8127032296:AAH7Vxg7v5I_6M94oZbidNvtyPEAFQVEPds'; // –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const CHAT_ID = '1364079703'; ¬† ¬† // –í–∞—à Chat ID (–º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π)
const PM2_APP_NAME = 'server-site'; // –ò–º—è –≤–∞—à–µ–≥–æ PM2-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

// –ü–æ—Ä–æ–≥–∏ –¥–ª—è –æ–ø–æ–≤–µ—â–µ–Ω–∏–π
const DISK_SPACE_THRESHOLD_PERCENT = 15; // –ü—Ä–æ—Ü–µ–Ω—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞, –Ω–∏–∂–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
const CPU_THRESHOLD_PERCENT = 80; ¬† ¬† ¬† // –ü—Ä–æ—Ü–µ–Ω—Ç CPU, –≤—ã—à–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è PM2_APP_NAME
const MEMORY_THRESHOLD_MB = 500; ¬† ¬† ¬† ¬†// –ú–µ–≥–∞–±–∞–π—Ç—ã –ø–∞–º—è—Ç–∏, –≤—ã—à–µ –∫–æ—Ç–æ—Ä—ã—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –¥–ª—è PM2_APP_NAME

const CHECK_INTERVAL_MS = 5 * 60 * 1000; // –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (5 –º–∏–Ω—É—Ç) –¥–ª—è –¥–∏—Å–∫–∞, CPU, –ø–∞–º—è—Ç–∏
// ******************************

// –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú –õ–û–ì–û–í PM2 - –í–ó–Ø–¢–´ –ò–ó –í–ê–®–ï–ì–û –í–´–í–û–î–ê `pm2 show`
const LOG_FILE_OUT = '/root/.pm2/logs/server-site-out.log';
const LOG_FILE_ERR = '/root/.pm2/logs/server-site-error.log';

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
const CRITICAL_KEYWORDS = ['error', 'fatal', 'critical', 'exception', 'failed', 'timeout', 'denied', 'unauthorized', 'segfault'];
const WARNING_KEYWORDS = ['warn', 'warning', 'deprecated', 'unstable', 'notice'];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é ---
const userStates = {}; // { chatId: 'current_menu_state' }

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å Markdown –∏ –æ–ø—Ü–∏—è–º–∏ ---
async function sendTelegramMessage(chatId, text, forceSend = false, options = {}) {
    if (!text.trim() && !forceSend) {
        return;
    }
    const MAX_MESSAGE_LENGTH = 4000;
    let parts = [];
    let remainingText = text;

    while (remainingText.length > 0) {
        let part = remainingText.substring(0, MAX_MESSAGE_LENGTH);
        let lastNewline = part.lastIndexOf('\n');
        if (lastNewline !== -1 && lastNewline !== part.length - 1 && remainingText.length > MAX_MESSAGE_LENGTH) {
            part = part.substring(0, lastNewline);
            remainingText = remainingText.substring(lastNewline + 1);
        } else {
            remainingText = remainingText.substring(MAX_MESSAGE_LENGTH);
        }
        parts.push(part);
    }

    for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        try {
            const currentOptions = i === 0 ? { parse_mode: 'MarkdownV2', ...options } : { parse_mode: 'MarkdownV2' };
            await bot.sendMessage(chatId, `\`\`\`\n${part}\n\`\`\``, currentOptions);
            console.log('Message part sent to Telegram.');
        } catch (error) {
            console.error('Error sending message to Telegram (MarkdownV2 failed):', error.response ? error.response.data : error.message);
            try {
                const currentOptions = i === 0 ? options : {};
                await bot.sendMessage(chatId, part, currentOptions);
                console.log('Message part sent without MarkdownV2 due to error.');
            } catch (fallbackError) {
                console.error('Fallback send failed:', fallbackError.response ? fallbackError.response.data : fallbackError.message);
            }
        }
    }
}

// --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ---

let lastReadOutPosition = 0;
let lastReadErrPosition = 0;

console.log(`Watching for logs from: ${LOG_FILE_OUT} and ${LOG_FILE_ERR}`);

function checkLogForKeywords(logLine) {
    const lowerCaseLine = logLine.toLowerCase();
    for (const keyword of CRITICAL_KEYWORDS) {
        if (lowerCaseLine.includes(keyword)) {
            return 'CRITICAL';
        }
    }
    for (const keyword of WARNING_KEYWORDS) {
        if (lowerCaseLine.includes(keyword)) {
            return 'WARNING';
        }
    }
    return null; // –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
}

function processLogFile(filePath, lastPositionRef, type) {
    fs.stat(filePath, (err, stats) => {
        if (err) {
            console.error(`Error stat-ing file ${filePath}:`, err.message);
            return;
        }

        const currentSize = stats.size;
        if (currentSize < lastPositionRef.value) {
            console.log(`Log file ${filePath} was truncated. Reading from start.`);
            lastPositionRef.value = 0;
        }

        if (currentSize > lastPositionRef.value) {
            const stream = fs.createReadStream(filePath, { start: lastPositionRef.value, encoding: 'utf8' });
            let buffer = '';
            let unprocessedLines = '';

            stream.on('data', (chunk) => {
                const lines = (unprocessedLines + chunk).split('\n');
                unprocessedLines = lines.pop();

                for (const line of lines) {
                    if (line.trim() === '') continue;

                    const alertType = checkLogForKeywords(line);
                    if (alertType) {
                        sendTelegramMessage(CHAT_ID, `üö® ${alertType} (${PM2_APP_NAME})\n\`\`\`\n${line}\n\`\`\``);
                    } else {
                        sendTelegramMessage(CHAT_ID, `[${type.toUpperCase()} - ${PM2_APP_NAME} - NEW]\n${line}`);
                    }
                }
            });

            stream.on('end', () => {
                if (unprocessedLines.trim() !== '') {
                    const alertType = checkLogForKeywords(unprocessedLines);
                    if (alertType) {
                        sendTelegramMessage(CHAT_ID, `üö® ${alertType} (${PM2_APP_NAME})\n\`\`\`\n${unprocessedLines}\n\`\`\``);
                    } else {
                        sendTelegramMessage(CHAT_ID, `[${type.toUpperCase()} - ${PM2_APP_NAME} - NEW]\n${unprocessedLines}`);
                    }
                }
                lastPositionRef.value = currentSize;
            });

            stream.on('error', (readErr) => {
                console.error(`Error reading from file ${filePath}:`, readErr.message);
            });
        }
    });
}

const lastPositionOut = { value: 0 };
const lastPositionErr = { value: 0 };

function initializeLogPositions() {
    [LOG_FILE_OUT, LOG_FILE_ERR].forEach(filePath => {
        if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            if (filePath === LOG_FILE_OUT) lastPositionOut.value = stats.size;
            if (filePath === LOG_FILE_ERR) lastPositionErr.value = stats.size;
            console.log(`Initial position for ${filePath}: ${stats.size}`);
        } else {
            console.warn(`Log file not found: ${filePath}. It will be watched when created.`);
        }
    });
}

initializeLogPositions();

const watcher = chokidar.watch([LOG_FILE_OUT, LOG_FILE_ERR], {
    persistent: true,
    ignoreInitial: true,
    awaitWriteFinish: {
        stabilityThreshold: 2000,
        pollInterval: 100
    }
});

watcher
    .on('add', (filePath) => {
        console.log(`File ${filePath} has been added`);
        if (filePath === LOG_FILE_OUT) lastPositionOut.value = 0;
        if (filePath === LOG_FILE_ERR) lastPositionErr.value = 0;
        processLogFile(filePath, filePath === LOG_FILE_OUT ? lastPositionOut : lastPositionErr, filePath === LOG_FILE_OUT ? 'out' : 'err');
    })
    .on('change', (filePath) => {
        console.log(`File ${filePath} has been changed`);
        processLogFile(filePath, filePath === LOG_FILE_OUT ? lastPositionOut : lastPositionErr, filePath === LOG_FILE_OUT ? 'out' : 'err');
    })
    .on('error', (error) => console.error(`Watcher error: ${error}`));

// --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---

function readLastLines(filePath, numLines, callback) {
    if (!fs.existsSync(filePath)) {
        return callback(null, `–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }

    fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) {
            console.error(`Error reading file ${filePath}:`, err.message);
            return callback(err);
        }
        const lines = data.split('\n').filter(line => line.trim() !== '');
        const lastLines = lines.slice(-numLines);
        callback(null, lastLines.join('\n'));
    });
}

// --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---

const keyboardOptions = {
    resize_keyboard: true,
    one_time_keyboard: false
};

const mainKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' }, { text: 'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' }],
            [{ text: '‚ùì –ü–æ–º–æ—â—å' }]
        ],
        ...keyboardOptions
    }
};

const managementKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }],
            [{ text: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }, { text: '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
        ],
        ...keyboardOptions
    }
};

const monitoringKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üìà –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' }, { text: 'üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤' }],
            [{ text: 'ü©∫ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É' }, { text: 'üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
        ],
        ...keyboardOptions
    }
};

// --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –û–¢–ü–†–ê–í–ö–ò –°–û–û–ë–©–ï–ù–ò–ô –° –ö–õ–ê–í–ò–ê–¢–£–†–û–ô ---
async function sendMessageWithKeyboard(chatId, text, keyboard, options = {}) {
    await bot.sendMessage(chatId, text, {
        reply_markup: keyboard.reply_markup, // <-- –ò–°–ü–†–ê–í–õ–ï–ù–û
        ...options // –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä parse_mode
    });
}


bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }
    userStates[chatId] = 'main'; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await sendMessageWithKeyboard(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è PM2. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', mainKeyboard);
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é ---
bot.onText(/üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) return;
    userStates[chatId] = 'management';
    await sendMessageWithKeyboard(chatId, '–í—ã –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', managementKeyboard);
});

bot.onText(/üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) return;
    userStates[chatId] = 'monitoring';
    await sendMessageWithKeyboard(chatId, '–í—ã –≤ –º–µ–Ω—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:', monitoringKeyboard);
});

bot.onText(/‚ùì –ü–æ–º–æ—â—å/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) return;
    await sendTelegramMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ª–æ–≥–æ–≤ PM2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è. –í–æ—Ç —á—Ç–æ —è –º–æ–≥—É:\n' +
        '- *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ*: –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫, –æ—Å—Ç–∞–Ω–æ–≤–∫–∞, –∑–∞–ø—É—Å–∫ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n' +
        '- *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥*: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞, –ª–æ–≥–æ–≤, —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã –∏ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö PM2 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.\n' +
        '- *–ü–æ–º–æ—â—å*: –ü–æ–ª—É—á–∏—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.\n\n' +
        '–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –Ω–∞–∂–º–∏—Ç–µ "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é".');
});

bot.onText(/‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) return;
    userStates[chatId] = 'main';
    await sendMessageWithKeyboard(chatId, '–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:', mainKeyboard);
});

// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –ø–æ–¥–º–µ–Ω—é "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥" ---

bot.onText(/üìà –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }

    pm2.list(async (err, list) => {
        if (err) {
            await sendTelegramMessage(chatId, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ PM2: ${err.message}`);
            console.error('Error listing PM2 processes:', err.message);
            return;
        }

        const app = list.find(p => p.name === PM2_APP_NAME);

        if (app) {
            let statusMessage = `üìä –°—Ç–∞—Ç—É—Å ${PM2_APP_NAME}:\n`;
            statusMessage += ` ¬† –°—Ç–∞—Ç—É—Å: ${app.pm2_env.status}\n`;
            statusMessage += ` ¬† Uptime: ${app.pm2_env.pm_uptime ? (Math.round((Date.now() - app.pm2_env.pm_uptime) / 1000 / 60)) + ' –º–∏–Ω' : 'N/A'}\n`;
            statusMessage += ` ¬† –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: ${app.pm2_env.restart_time}\n`;
            statusMessage += ` ¬† –ü–∞–º—è—Ç—å: ${(app.monit.memory / 1024 / 1024).toFixed(2)} MB\n`;
            statusMessage += ` ¬† CPU: ${app.monit.cpu}%\n`;

            if (app.monit.cpu > CPU_THRESHOLD_PERCENT) {
                statusMessage += ` ¬† ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: CPU (${app.monit.cpu}%) –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ ${CPU_THRESHOLD_PERCENT}%\n`;
            }
            if ((app.monit.memory / 1024 / 1024) > MEMORY_THRESHOLD_MB) {
                statusMessage += ` ¬† ‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –ü–∞–º—è—Ç—å (${(app.monit.memory / 1024 / 1024).toFixed(2)} MB) –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ ${MEMORY_THRESHOLD_MB} MB\n`;
            }

            await sendTelegramMessage(chatId, statusMessage);
        } else {
            await sendTelegramMessage(chatId, `–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${PM2_APP_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ PM2.`);
        }
    });
});

bot.onText(/üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ (\d+) –ª–æ–≥–æ–≤|üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ª–æ–≥–æ–≤/, async (msg, match) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }

    // –ï—Å–ª–∏ –Ω–µ—Ç —á–∏—Å–ª–∞ –≤ –∫–æ–º–∞–Ω–¥–µ, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 20
    const linesToFetch = match && match[1] ? parseInt(match[1], 10) : 20;

    if (isNaN(linesToFetch) || linesToFetch <= 0) {
        await sendTelegramMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /logs 50)');
        return;
    }

    await sendTelegramMessage(chatId, `–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${linesToFetch} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –¥–ª—è ${PM2_APP_NAME}...`);

    readLastLines(LOG_FILE_OUT, linesToFetch, async (err, outLogs) => {
        if (err) {
            await sendTelegramMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ OUT –ª–æ–≥–æ–≤: ${err.message}`);
            return;
        }
        await sendTelegramMessage(chatId, `[OUT - ${PM2_APP_NAME} - –ó–ê–ü–†–û–° ${linesToFetch}]\n${outLogs || '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ OUT –ª–æ–≥–µ.'}`);
    });

    readLastLines(LOG_FILE_ERR, linesToFetch, async (err, errLogs) => {
        if (err) {
            await sendTelegramMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ERR –ª–æ–≥–æ–≤: ${err.message}`);
            return;
        }
        await sendTelegramMessage(chatId, `[ERR - ${PM2_APP_NAME} - –ó–ê–ü–†–û–° ${linesToFetch}]\n${errLogs || '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ ERR –ª–æ–≥–µ.'}`);
    });
});


bot.onText(/ü©∫ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }
    await sendTelegramMessage(chatId, '–í—ã–ø–æ–ª–Ω—è—é —Ä—É—á–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã...');
    await checkSystemHealth();
});

bot.onText(/üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }

    await sendTelegramMessage(chatId, '–ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π PM2...');

    pm2.list(async (err, list) => {
        if (err) {
            await sendTelegramMessage(chatId, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π PM2: ${err.message}`);
            console.error('Error listing all PM2 processes:', err.message);
            return;
        }

        if (list.length === 0) {
            await sendTelegramMessage(chatId, '–í PM2 –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π.');
            return;
        }

        let message = 'üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π PM2:\n\n';
        list.forEach(app => {
            message += `*–ò–º—è:* ${app.name}\n`;
            message += ` ¬†*ID:* ${app.pm_id}\n`;
            message += ` ¬†*–°—Ç–∞—Ç—É—Å:* ${app.pm2_env.status}\n`;
            message += ` ¬†*Uptime:* ${app.pm2_env.pm_uptime ? (Math.round((Date.now() - app.pm2_env.pm_uptime) / 1000 / 60)) + ' –º–∏–Ω' : 'N/A'}\n`;
            message += ` ¬†*–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤:* ${app.pm2_env.restart_time}\n`;
            message += ` ¬†*–ü–∞–º—è—Ç—å:* ${(app.monit.memory / 1024 / 1024).toFixed(2)} MB\n`;
            message += ` ¬†*CPU:* ${app.monit.cpu}%\n`;
            message += `\n`;
        });

        await sendTelegramMessage(chatId, message);
    });
});


// --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∏–∑ –ø–æ–¥–º–µ–Ω—é "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ" ---

bot.onText(/üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        await sendTelegramMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        return;
    }

    await sendTelegramMessage(chatId, `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ ${PM2_APP_NAME}...`);

    pm2.restart(PM2_APP_NAME, async (err, apps) => {
        if (err) {
            console.error(`Error restarting ${PM2_APP_NAME}:`, err.message);
            await sendTelegramMessage(chatId, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ${PM2_APP_NAME}: ${err.message}`);
            return;
        }
        await sendTelegramMessage(chatId, `üü¢ ${PM2_APP_NAME} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.`);
    });
});

bot.onText(/‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        await sendTelegramMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        return;
    }

    await sendTelegramMessage(chatId, `–ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É ${PM2_APP_NAME}...`);

    pm2.stop(PM2_APP_NAME, async (err) => {
        if (err) {
            console.error(`Error stopping ${PM2_APP_NAME}:`, err.message);
            await sendTelegramMessage(chatId, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ ${PM2_APP_NAME}: ${err.message}`);
            return;
        }
        await sendTelegramMessage(chatId, `‚ö´Ô∏è ${PM2_APP_NAME} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω –Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫—É.`);
    });
});

bot.onText(/‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        await sendTelegramMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        return;
    }

    await sendTelegramMessage(chatId, `–ó–∞–ø—Ä–æ—Å –Ω–∞ –∑–∞–ø—É—Å–∫ ${PM2_APP_NAME}...`);

    pm2.start(PM2_APP_NAME, async (err) => {
        if (err) {
            console.error(`Error starting ${PM2_APP_NAME}:`, err.message);
            await sendTelegramMessage(chatId, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ ${PM2_APP_NAME}: ${err.message}`);
            return;
        }
        await sendTelegramMessage(chatId, `üü¢ ${PM2_APP_NAME} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω –Ω–∞ –∑–∞–ø—É—Å–∫.`);
    });
});


// --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è PM2 (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
pm2.connect(function (err) {
    if (err) {
        console.error('Error connecting to PM2:', err.message);
        sendTelegramMessage(CHAT_ID, `üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ PM2: ${err.message}`, true);
        return;
    }
    console.log('Connected to PM2 daemon.');

    pm2.launchBus(function (err, bus) {
        if (err) {
            console.error('Error launching PM2 bus:', err.message);
            sendTelegramMessage(CHAT_ID, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π PM2: ${err.message}`, true);
            return;
        }

        bus.on('process:event', function (data) {
            if (data.process.name === PM2_APP_NAME) {
                let message = `üìä PM2 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${PM2_APP_NAME}: \n`;
                switch (data.event) {
                    case 'stop':
                        message += `üî¥ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –û–°–¢–ê–ù–û–í–õ–ï–ù–û! (Status: ${data.process.status})`;
                        break;
                    case 'restart':
                        message += `üü° –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù–û! (Status: ${data.process.status})`;
                        break;
                    case 'exit':
                        message += `üíî –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –í–´–®–õ–û –ò–ó –°–¢–†–û–Ø! (Status: ${data.process.status})`;
                        break;
                    case 'online':
                        message += `üü¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û –ò –†–ê–ë–û–¢–ê–ï–¢! (Status: ${data.process.status})`;
                        break;
                    default:
                        message += `‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${data.event} (Status: ${data.process.status})`;
                        break;
                }
                sendTelegramMessage(CHAT_ID, message, true);
            }
        });
    });
});

// --- –°–∏—Å—Ç–µ–º–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async function checkSystemHealth() {
    console.log('Performing scheduled system health check...');
    let healthMessage = 'ü©∫ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:\n';
    let alertCount = 0;

    try {
        const drives = await getDrives();
        let diskInfo = '';
        drives.forEach(drive => {
            const usedPercent = (drive.used / drive.total * 100).toFixed(2);
            const freePercent = (drive.available / drive.total * 100).toFixed(2);
            diskInfo += ` ¬†–î–∏—Å–∫ ${drive.mounted}:\n`;
            diskInfo += ` ¬† ¬†–í—Å–µ–≥–æ: ${(drive.total / (1024 ** 3)).toFixed(2)} GB\n`;
            diskInfo += ` ¬† ¬†–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: ${(drive.used / (1024 ** 3)).toFixed(2)} GB (${usedPercent}%)\n`;
            diskInfo += ` ¬† ¬†–°–≤–æ–±–æ–¥–Ω–æ: ${(drive.available / (1024 ** 3)).toFixed(2)} GB (${freePercent}%)\n`;

            if (freePercent < DISK_SPACE_THRESHOLD_PERCENT) {
                healthMessage += `üö® –ù–∏–∑–∫–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ ${drive.mounted}: ${freePercent}% —Å–≤–æ–±–æ–¥–Ω–æ (–Ω–∏–∂–µ ${DISK_SPACE_THRESHOLD_PERCENT}%)\n`;
                alertCount++;
            }
        });
        healthMessage += `\nüíæ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö:\n${diskInfo}`;
    } catch (e) {
        healthMessage += `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö: ${e.message}\n`;
        console.error('Error getting disk info:', e);
        alertCount++;
    }

    pm2.list(async (err, list) => {
        if (err) {
            healthMessage += `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ PM2 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${err.message}\n`;
            console.error('Error listing PM2 processes for health check:', err.message);
            alertCount++;
            await sendTelegramMessage(CHAT_ID, healthMessage, true);
            return;
        }

        const app = list.find(p => p.name === PM2_APP_NAME);
        if (app) {
            healthMessage += `\nüìà –°–æ—Å—Ç–æ—è–Ω–∏–µ ${PM2_APP_NAME}:\n`;
            healthMessage += ` ¬†CPU: ${app.monit.cpu}%\n`;
            healthMessage += ` ¬†–ü–∞–º—è—Ç—å: ${(app.monit.memory / 1024 / 1024).toFixed(2)} MB\n`;

            if (app.monit.cpu > CPU_THRESHOLD_PERCENT) {
                healthMessage += `üö® CPU (${app.monit.cpu}%) –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ ${CPU_THRESHOLD_PERCENT}%\n`;
                alertCount++;
            }
            if ((app.monit.memory / 1024 / 1024) > MEMORY_THRESHOLD_MB) {
                healthMessage += `üö® –ü–∞–º—è—Ç—å (${(app.monit.memory / 1024 / 1024).toFixed(2)} MB) –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ ${MEMORY_THRESHOLD_MB} MB\n`;
                alertCount++;
            }
        } else {
            healthMessage += `\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${PM2_APP_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ PM2 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CPU/–ø–∞–º—è—Ç–∏.\n`;
        }

        if (alertCount > 0) {
            await sendTelegramMessage(CHAT_ID, healthMessage, true);
        } else {
            console.log('System health check passed without alerts.');
        }
    });
}

setInterval(checkSystemHealth, CHECK_INTERVAL_MS);

console.log('PM2 Log & Status Telegram Bot is running and listening for commands and events...');

bot.on('polling_error', (error) => {
    console.error('Polling error:', error.code, error.message);
});