const axios = require('axios');
const fs = require('fs');
const path = require('path');
const chokidar = require('chokidar');
const TelegramBot = require('node-telegram-bot-api');
const pm2 = require('pm2'); // –î–æ–±–∞–≤–ª—è–µ–º –º–æ–¥—É–ª—å pm2

// *** –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï ***
const BOT_TOKEN = '8127032296:AAH7Vxg7v5I_6M94oZbidNvtyPEAFQVEPds'; // –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const CHAT_ID = '1364079703';     // –í–∞—à Chat ID (–º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π)
const PM2_APP_NAME = 'server-site'; // –ò–º—è –≤–∞—à–µ–≥–æ PM2-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// ******************************

// –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú –õ–û–ì–û–í PM2 - –í–ó–Ø–¢–´ –ò–ó –í–ê–®–ï–ì–û –í–´–í–û–î–ê `pm2 show`
const LOG_FILE_OUT = '/root/.pm2/logs/server-site-out.log';
const LOG_FILE_ERR = '/root/.pm2/logs/server-site-error.log';

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
const CRITICAL_KEYWORDS = ['error', 'fatal', 'critical', 'exception', 'failed', 'timeout', 'denied', 'unauthorized', 'segfault'];
const WARNING_KEYWORDS = ['warn', 'warning', 'deprecated', 'unstable', 'notice'];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram
async function sendTelegramMessage(chatId, text, forceSend = false) {
    if (!text.trim() && !forceSend) { // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ
        return;
    }
    const MAX_MESSAGE_LENGTH = 4000;
    let parts = [];
    let remainingText = text;

    while (remainingText.length > 0) {
        let part = remainingText.substring(0, MAX_MESSAGE_LENGTH);
        // –ü–æ–ø—ã—Ç–∫–∞ –æ–±—Ä–µ–∑–∞—Ç—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, —á—Ç–æ–±—ã –Ω–µ –ª–æ–º–∞—Ç—å –ª–æ–≥–∏
        let lastNewline = part.lastIndexOf('\n');
        if (lastNewline !== -1 && lastNewline !== part.length - 1 && remainingText.length > MAX_MESSAGE_LENGTH) {
            part = part.substring(0, lastNewline);
            remainingText = remainingText.substring(lastNewline + 1);
        } else {
            remainingText = remainingText.substring(MAX_MESSAGE_LENGTH);
        }
        parts.push(part);
    }

    for (const part of parts) {
        try {
            await bot.sendMessage(chatId, `\`\`\`\n${part}\n\`\`\``, { parse_mode: 'MarkdownV2' });
            console.log('Message part sent to Telegram.');
        } catch (error) {
            console.error('Error sending message to Telegram (MarkdownV2 failed):', error.response ? error.response.data : error.message);
            // –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –±–µ–∑ MarkdownV2
            try {
                await bot.sendMessage(chatId, part);
                console.log('Message part sent without MarkdownV2 due to error.');
            } catch (fallbackError) {
                console.error('Fallback send failed:', fallbackError.response ? fallbackError.data : fallbackError.message);
            }
        }
    }
}

// --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ---

let lastReadOutPosition = 0;
let lastReadErrPosition = 0;

console.log(`Watching for logs from: ${LOG_FILE_OUT} and ${LOG_FILE_ERR}`);

function checkLogForKeywords(logLine) {
    const lowerCaseLine = logLine.toLowerCase();
    for (const keyword of CRITICAL_KEYWORDS) {
        if (lowerCaseLine.includes(keyword)) {
            return 'CRITICAL';
        }
    }
    for (const keyword of WARNING_KEYWORDS) {
        if (lowerCaseLine.includes(keyword)) {
            return 'WARNING';
        }
    }
    return null; // –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
}

function processLogFile(filePath, lastPositionRef, type) {
    fs.stat(filePath, (err, stats) => {
        if (err) {
            console.error(`Error stat-ing file ${filePath}:`, err.message);
            return;
        }

        const currentSize = stats.size;
        if (currentSize < lastPositionRef.value) {
            console.log(`Log file ${filePath} was truncated. Reading from start.`);
            lastPositionRef.value = 0;
        }

        if (currentSize > lastPositionRef.value) {
            const stream = fs.createReadStream(filePath, { start: lastPositionRef.value, encoding: 'utf8' });
            let buffer = '';
            let unprocessedLines = ''; // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–µ–ø–æ–ª–Ω—ã—Ö —Å—Ç—Ä–æ–∫

            stream.on('data', (chunk) => {
                const lines = (unprocessedLines + chunk).split('\n');
                unprocessedLines = lines.pop(); // –ü–æ—Å–ª–µ–¥–Ω—è—è —Å—Ç—Ä–æ–∫–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–ø–æ–ª–Ω–æ–π

                for (const line of lines) {
                    if (line.trim() === '') continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏

                    const alertType = checkLogForKeywords(line);
                    if (alertType) {
                        sendTelegramMessage(CHAT_ID, `üö® ${alertType} (${PM2_APP_NAME})\n\`\`\`\n${line}\n\`\`\``);
                    } else {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—ã—á–Ω—ã–µ –ª–æ–≥–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–∏ –Ω–æ–≤—ã–µ –∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Å–ª–æ–≤
                        // –î–ª—è –∑–∞–ø—Ä–æ—Å–∞ –ª–æ–≥–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
                        sendTelegramMessage(CHAT_ID, `[${type.toUpperCase()} - ${PM2_APP_NAME} - NEW]\n${line}`);
                    }
                }
            });

            stream.on('end', () => {
                // –û–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Å—Ç–∞–≤—à—É—é—Å—è –Ω–µ–ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
                if (unprocessedLines.trim() !== '') {
                    const alertType = checkLogForKeywords(unprocessedLines);
                    if (alertType) {
                        sendTelegramMessage(CHAT_ID, `üö® ${alertType} (${PM2_APP_NAME})\n\`\`\`\n${unprocessedLines}\n\`\`\``);
                    } else {
                        sendTelegramMessage(CHAT_ID, `[${type.toUpperCase()} - ${PM2_APP_NAME} - NEW]\n${unprocessedLines}`);
                    }
                }
                lastPositionRef.value = currentSize;
            });

            stream.on('error', (readErr) => {
                console.error(`Error reading from file ${filePath}:`, readErr.message);
            });
        }
    });
}

const lastPositionOut = { value: 0 };
const lastPositionErr = { value: 0 };

function initializeLogPositions() {
    [LOG_FILE_OUT, LOG_FILE_ERR].forEach(filePath => {
        if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            if (filePath === LOG_FILE_OUT) lastPositionOut.value = stats.size;
            if (filePath === LOG_FILE_ERR) lastPositionErr.value = stats.size;
            console.log(`Initial position for ${filePath}: ${stats.size}`);
        } else {
            console.warn(`Log file not found: ${filePath}. It will be watched when created.`);
        }
    });
}

initializeLogPositions();

const watcher = chokidar.watch([LOG_FILE_OUT, LOG_FILE_ERR], {
    persistent: true,
    ignoreInitial: true,
    awaitWriteFinish: {
        stabilityThreshold: 2000,
        pollInterval: 100
    }
});

watcher
    .on('add', (filePath) => {
        console.log(`File ${filePath} has been added`);
        if (filePath === LOG_FILE_OUT) lastPositionOut.value = 0;
        if (filePath === LOG_FILE_ERR) lastPositionErr.value = 0;
        processLogFile(filePath, filePath === LOG_FILE_OUT ? lastPositionOut : lastPositionErr, filePath === LOG_FILE_OUT ? 'out' : 'err');
    })
    .on('change', (filePath) => {
        console.log(`File ${filePath} has been changed`);
        processLogFile(filePath, filePath === LOG_FILE_OUT ? lastPositionOut : lastPositionErr, filePath === LOG_FILE_OUT ? 'out' : 'err');
    })
    .on('error', (error) => console.error(`Watcher error: ${error}`));

// --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---

function readLastLines(filePath, numLines, callback) {
    if (!fs.existsSync(filePath)) {
        return callback(null, `–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${filePath}`);
    }

    fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) {
            console.error(`Error reading file ${filePath}:`, err.message);
            return callback(err);
        }
        const lines = data.split('\n').filter(line => line.trim() !== '');
        const lastLines = lines.slice(-numLines);
        callback(null, lastLines.join('\n'));
    });
}

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }
    bot.sendMessage(chatId, '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ª–æ–≥–æ–≤ PM2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n' +
        '- /logs <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ_—Å—Ç—Ä–æ–∫> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ª–æ–≥–æ–≤.\n' +
        '- /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.\n' +
        '- /restart_server_site –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.');
});

bot.onText(/\/logs(?:@\w+)?(?:\s+(\d+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }

    const linesToFetch = match[1] ? parseInt(match[1], 10) : 20;

    if (isNaN(linesToFetch) || linesToFetch <= 0) {
        await sendTelegramMessage(chatId, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: /logs 50)');
        return;
    }

    await sendTelegramMessage(chatId, `–ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${linesToFetch} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –¥–ª—è ${PM2_APP_NAME}...`);

    readLastLines(LOG_FILE_OUT, linesToFetch, async (err, outLogs) => {
        if (err) {
            await sendTelegramMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ OUT –ª–æ–≥–æ–≤: ${err.message}`);
            return;
        }
        await sendTelegramMessage(chatId, `[OUT - ${PM2_APP_NAME} - –ó–ê–ü–†–û–° ${linesToFetch}]\n${outLogs || '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ OUT –ª–æ–≥–µ.'}`);
    });

    readLastLines(LOG_FILE_ERR, linesToFetch, async (err, errLogs) => {
        if (err) {
            await sendTelegramMessage(chatId, `–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ERR –ª–æ–≥–æ–≤: ${err.message}`);
            return;
        }
        await sendTelegramMessage(chatId, `[ERR - ${PM2_APP_NAME} - –ó–ê–ü–†–û–° ${linesToFetch}]\n${errLogs || '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ ERR –ª–æ–≥–µ.'}`);
    });
});

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞
bot.onText(/\/restart_server_site/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        await sendTelegramMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        return;
    }

    await sendTelegramMessage(chatId, `–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ ${PM2_APP_NAME}...`);

    pm2.restart(PM2_APP_NAME, async (err, apps) => {
        if (err) {
            console.error(`Error restarting ${PM2_APP_NAME}:`, err.message);
            await sendTelegramMessage(chatId, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ${PM2_APP_NAME}: ${err.message}`);
            return;
        }
        await sendTelegramMessage(chatId, `üü¢ ${PM2_APP_NAME} —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.`);
        // PM2 —Ç–∞–∫–∂–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–±—ã—Ç–∏–µ 'restart', –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–æ—Ç–æ–º.
    });
});

// --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è PM2 ---

pm2.connect(function(err) {
    if (err) {
        console.error('Error connecting to PM2:', err.message);
        sendTelegramMessage(CHAT_ID, `üî¥ –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–æ—Ç–∞ –∫ PM2: ${err.message}`, true);
        return;
    }

    console.log('Connected to PM2 daemon.');

    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è PM2
    pm2.launchBus(function(err, bus) {
        if (err) {
            console.error('Error launching PM2 bus:', err.message);
            sendTelegramMessage(CHAT_ID, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π PM2: ${err.message}`, true);
            return;
        }

        bus.on('process:event', function(data) {
            if (data.process.name === PM2_APP_NAME) {
                let message = `üìä PM2 —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è ${PM2_APP_NAME}: \n`;
                switch (data.event) {
                    case 'stop':
                        message += `üî¥ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –û–°–¢–ê–ù–û–í–õ–ï–ù–û! (Status: ${data.process.status})`;
                        break;
                    case 'restart':
                        message += `üü° –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù–û! (Status: ${data.process.status})`;
                        break;
                    case 'exit':
                        message += `üíî –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –í–´–®–õ–û –ò–ó –°–¢–†–û–Ø! (Status: ${data.process.status})`;
                        break;
                    case 'online':
                        message += `üü¢ –ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û –ò –†–ê–ë–û–¢–ê–ï–¢! (Status: ${data.process.status})`;
                        break;
                    default:
                        message += `‚ÑπÔ∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ: ${data.event} (Status: ${data.process.status})`;
                        break;
                }
                sendTelegramMessage(CHAT_ID, message, true); // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            }
        });
    });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /status
bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }

    pm2.list(async (err, list) => {
        if (err) {
            await sendTelegramMessage(chatId, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ PM2: ${err.message}`);
            console.error('Error listing PM2 processes:', err.message);
            return;
        }

        const app = list.find(p => p.name === PM2_APP_NAME);

        if (app) {
            let statusMessage = `üìä –°—Ç–∞—Ç—É—Å ${PM2_APP_NAME}:\n`;
            statusMessage += `  –°—Ç–∞—Ç—É—Å: ${app.pm2_env.status}\n`;
            statusMessage += `  Uptime: ${app.pm2_env.pm_uptime ? (Math.round((Date.now() - app.pm2_env.pm_uptime) / 1000 / 60)) + ' –º–∏–Ω' : 'N/A'}\n`;
            statusMessage += `  –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤: ${app.pm2_env.restart_time}\n`;
            statusMessage += `  –ü–∞–º—è—Ç—å: ${(app.monit.memory / 1024 / 1024).toFixed(2)} MB\n`;
            statusMessage += `  CPU: ${app.monit.cpu}%\n`;
            await sendTelegramMessage(chatId, statusMessage);
        } else {
            await sendTelegramMessage(chatId, `–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ ${PM2_APP_NAME} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ PM2.`);
        }
    });
});


console.log('PM2 Log & Status Telegram Bot is running and listening for commands and events...');

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
    console.error('Polling error:', error.code, error.message);
    // bot.sendMessage(CHAT_ID, `‚ùóÔ∏è –û—à–∏–±–∫–∞polling: ${error.code} - ${error.message}`); // –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∏—Ç—å –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –æ—à–∏–±–∫–∞—Ö —Å–∞–º–æ–≥–æ –±–æ—Ç–∞
}); 