const axios = require('axios');
const fs = require('fs');
const path = require('path');
const chokidar = require('chokidar');
const TelegramBot = require('node-telegram-bot-api');
const pm2 = require('pm2');

// *** –ù–ê–°–¢–†–û–ô–¢–ï –≠–¢–ò –ü–ï–†–ï–ú–ï–ù–ù–´–ï ***
const BOT_TOKEN = '8127032296:AAH7Vxg7v5I_6M94oZbidNvtyPEAFQVEPds'; // –í–∞—à —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
const CHAT_ID = '1364079703';     // –í–∞—à Chat ID (–º–æ–∂–µ—Ç –±—ã—Ç—å —á–∏—Å–ª–æ–º –∏–ª–∏ —Å—Ç—Ä–æ–∫–æ–π)
const PM2_APP_NAME = 'server-site'; // –ò–º—è –≤–∞—à–µ–≥–æ PM2-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
// ******************************

// –ü–£–¢–ò –ö –§–ê–ô–õ–ê–ú –õ–û–ì–û–í PM2 - –í–ó–Ø–¢–´ –ò–ó –í–ê–®–ï–ì–û –í–´–í–û–î–ê `pm2 show`
const LOG_FILE_OUT = '/root/.pm2/logs/server-site-out.log';
const LOG_FILE_ERR = '/root/.pm2/logs/server-site-error.log';

// –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π (–Ω–µ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã –∫ —Ä–µ–≥–∏—Å—Ç—Ä—É)
const CRITICAL_KEYWORDS = ['error', 'fatal', 'critical', 'exception', 'failed', 'timeout', 'denied', 'unauthorized', 'segfault'];
const WARNING_KEYWORDS = ['warn', 'warning', 'deprecated', 'unstable', 'notice'];

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞
const bot = new TelegramBot(BOT_TOKEN, { polling: true });

// --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è Markdown ---

// –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–∏–º–≤–æ–ª—ã MarkdownV2 –¥–ª—è –æ–±—ã—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ (–≤–Ω–µ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞)
const escapeMarkdownV2Text = (str) => {
    return str.replace(/([_*[\]()~`>#+\-=|{}.!])/g, '\\$1');
};

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Telegram ---
// –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –ß–ò–°–¢–û–ì–û —Ç–µ–∫—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ª–æ–≥–æ–≤).
// –î–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å MarkdownV2 –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å bot.sendMessage –Ω–∞–ø—Ä—è–º—É—é.
async function sendTelegramMessage(chatId, text, options = {}) {
    if (!text || !text.trim()) {
        return;
    }
    const MAX_MESSAGE_LENGTH = 4000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è Telegram

    let remainingText = text;
    let parts = [];

    // –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏
    while (remainingText.length > 0) {
        let part = remainingText.substring(0, MAX_MESSAGE_LENGTH);
        let lastNewline = part.lastIndexOf('\n');

        if (lastNewline !== -1 && (part.length === MAX_MESSAGE_LENGTH || remainingText.length > MAX_MESSAGE_LENGTH)) {
            part = part.substring(0, lastNewline);
            remainingText = remainingText.substring(lastNewline + 1);
        } else {
            remainingText = remainingText.substring(MAX_MESSAGE_LENGTH);
        }
        parts.push(part);
    }

    for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        try {
            const currentOptions = (i === parts.length - 1) ? { ...options } : {};
            await bot.sendMessage(chatId, part, currentOptions);
            console.log(`Message part ${i + 1}/${parts.length} sent to Telegram.`);
        } catch (error) {
            console.error(`Error sending message part ${i + 1}/${parts.length}:`, error.response ? error.response.data : error.message);
            console.error('Failed to send message even without formatting. Check Telegram API errors.');
        }
    }
}


// --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –ª–æ–≥–æ–≤ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –ø–æ–∏—Å–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ---

let lastReadOutPosition = 0;
let lastReadErrPosition = 0;

console.log(`Watching for logs from: ${LOG_FILE_OUT} and ${LOG_FILE_ERR}`);

function checkLogForKeywords(logLine) {
    const lowerCaseLine = logLine.toLowerCase();
    for (const keyword of CRITICAL_KEYWORDS) {
        if (lowerCaseLine.includes(keyword)) {
            return 'CRITICAL';
        }
    }
    for (const keyword of WARNING_KEYWORDS) {
        if (lowerCaseLine.includes(keyword)) {
            return 'WARNING';
        }
    }
    return null; // –ù–µ—Ç —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π
}

function processLogFile(filePath, lastPositionRef, type) {
    fs.stat(filePath, (err, stats) => {
        if (err) {
            console.error(`Error stat-ing file ${filePath}:`, err.message);
            return;
        }

        const currentSize = stats.size;
        if (currentSize < lastPositionRef.value) {
            console.log(`Log file ${filePath} was truncated. Reading from start.`);
            lastPositionRef.value = 0;
        }

        if (currentSize > lastPositionRef.value) {
            const stream = fs.createReadStream(filePath, { start: lastPositionRef.value, encoding: 'utf8' });
            let buffer = '';
            let unprocessedLines = '';

            stream.on('data', (chunk) => {
                const lines = (unprocessedLines + chunk).split('\n');
                unprocessedLines = lines.pop();

                for (const line of lines) {
                    if (line.trim() === '') continue;

                    const alertType = checkLogForKeywords(line);
                    if (alertType) {
                        const emoji = alertType === 'CRITICAL' ? 'üö®' : '‚ö†Ô∏è';
                        bot.sendMessage(CHAT_ID, `${emoji} *${alertType} ALERT* (${escapeMarkdownV2Text(PM2_APP_NAME)}):`, { parse_mode: 'MarkdownV2' });
                        sendTelegramMessage(CHAT_ID, line); // –°–∞–º –ª–æ–≥ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    } else {
                        bot.sendMessage(CHAT_ID, `üìù *–ù–æ–≤—ã–π –ª–æ–≥* [${type.toUpperCase()} - ${escapeMarkdownV2Text(PM2_APP_NAME)}]:`, { parse_mode: 'MarkdownV2' });
                        sendTelegramMessage(CHAT_ID, line); // –°–∞–º –ª–æ–≥ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    }
                }
            });

            stream.on('end', () => {
                if (unprocessedLines.trim() !== '') {
                    const alertType = checkLogForKeywords(unprocessedLines);
                    if (alertType) {
                        const emoji = alertType === 'CRITICAL' ? 'üö®' : '‚ö†Ô∏è';
                        bot.sendMessage(CHAT_ID, `${emoji} *${alertType} ALERT* (${escapeMarkdownV2Text(PM2_APP_NAME)}):`, { parse_mode: 'MarkdownV2' });
                        sendTelegramMessage(CHAT_ID, unprocessedLines);
                    } else {
                        bot.sendMessage(CHAT_ID, `üìù *–ù–æ–≤—ã–π –ª–æ–≥* [${type.toUpperCase()} - ${escapeMarkdownV2Text(PM2_APP_NAME)}]:`, { parse_mode: 'MarkdownV2' });
                        sendTelegramMessage(CHAT_ID, unprocessedLines);
                    }
                }
                lastPositionRef.value = currentSize;
            });

            stream.on('error', (readErr) => {
                console.error(`Error reading from file ${filePath}:`, readErr.message);
            });
        }
    });
}

const lastPositionOut = { value: 0 };
const lastPositionErr = { value: 0 };

function initializeLogPositions() {
    [LOG_FILE_OUT, LOG_FILE_ERR].forEach(filePath => {
        if (fs.existsSync(filePath)) {
            const stats = fs.statSync(filePath);
            if (filePath === LOG_FILE_OUT) lastPositionOut.value = stats.size;
            if (filePath === LOG_FILE_ERR) lastPositionErr.value = stats.size;
            console.log(`Initial position for ${filePath}: ${stats.size}`);
        } else {
            console.warn(`Log file not found: ${filePath}. It will be watched when created.`);
        }
    });
}

initializeLogPositions();

const watcher = chokidar.watch([LOG_FILE_OUT, LOG_FILE_ERR], {
    persistent: true,
    ignoreInitial: true,
    awaitWriteFinish: {
        stabilityThreshold: 2000,
        pollInterval: 100
    }
});

watcher
    .on('add', (filePath) => {
        console.log(`File ${filePath} has been added`);
        if (filePath === LOG_FILE_OUT) lastPositionOut.value = 0;
        if (filePath === LOG_FILE_ERR) lastPositionErr.value = 0;
        processLogFile(filePath, filePath === LOG_FILE_OUT ? lastPositionOut : lastPositionErr, filePath === LOG_FILE_OUT ? 'out' : 'err');
    })
    .on('change', (filePath) => {
        console.log(`File ${filePath} has been changed`);
        processLogFile(filePath, filePath === LOG_FILE_OUT ? lastPositionOut : lastPositionErr, filePath === LOG_FILE_OUT ? 'out' : 'err');
    })
    .on('error', (error) => console.error(`Watcher error: ${error}`));

// --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ Telegram ---

function readLastLines(filePath, numLines, callback) {
    if (!fs.existsSync(filePath)) {
        return callback(null, `–§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: ${escapeMarkdownV2Text(filePath)}`);
    }

    fs.readFile(filePath, 'utf8', (err, data) => {
        if (err) {
            console.error(`Error reading file ${filePath}:`, err.message);
            return callback(err);
        }
        const lines = data.split('\n').filter(line => line.trim() !== '');
        const lastLines = lines.slice(-numLines);
        callback(null, lastLines.join('\n'));
    });
}

bot.onText(/\/start/, (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }
    const welcomeMessage = `üëã *–ü—Ä–∏–≤–µ—Ç! –Ø –≤–∞—à –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ PM2 –ª–æ–≥–æ–≤ –∏ —Å—Ç–∞—Ç—É—Å–∞.*
–Ø –±—É–¥—É –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∏–∑ –ª–æ–≥–æ–≤ *${escapeMarkdownV2Text(PM2_APP_NAME)}*.

*–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:*`;

    const replyKeyboard = {
        keyboard: [
            [{ text: '/logs 20' }, { text: '/status' }],
            [{ text: '/restart_server_site' }],
        ],
        resize_keyboard: true,
        one_time_keyboard: false, // –ö–Ω–æ–ø–∫–∏ –±—É–¥—É—Ç –≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã
    };

    bot.sendMessage(chatId, welcomeMessage, {
        parse_mode: 'MarkdownV2',
        reply_markup: replyKeyboard
    });
});

bot.onText(/\/logs(?:@\w+)?(?:\s+(\d+))?/, async (msg, match) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }

    const linesToFetch = match[1] ? parseInt(match[1], 10) : 20;

    if (isNaN(linesToFetch) || linesToFetch <= 0) {
        await bot.sendMessage(chatId, '‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ —Å—Ç—Ä–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: `/logs 50`)', { parse_mode: 'MarkdownV2' });
        return;
    }

    await sendLogsWithHeaders(chatId, linesToFetch);
});

// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
async function sendLogsWithHeaders(chatId, linesToFetch) {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å MarkdownV2
    await bot.sendMessage(chatId, `üîç –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ *${linesToFetch}* —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ –¥–ª—è *${escapeMarkdownV2Text(PM2_APP_NAME)}*...`, { parse_mode: 'MarkdownV2' });

    readLastLines(LOG_FILE_OUT, linesToFetch, async (err, outLogs) => {
        if (err) {
            await bot.sendMessage(chatId, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ OUT –ª–æ–≥–æ–≤: ${escapeMarkdownV2Text(err.message)}`, { parse_mode: 'MarkdownV2' });
            return;
        }
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å MarkdownV2
        await bot.sendMessage(chatId, `üìã *OUT –ª–æ–≥ (${escapeMarkdownV2Text(PM2_APP_NAME)} - –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${linesToFetch} —Å—Ç—Ä–æ–∫):*`, { parse_mode: 'MarkdownV2' });
        // –°–∞–º –ª–æ–≥ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await sendTelegramMessage(chatId, outLogs || '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ OUT –ª–æ–≥–µ.');
    });

    readLastLines(LOG_FILE_ERR, linesToFetch, async (err, errLogs) => {
        if (err) {
            await bot.sendMessage(chatId, `üî¥ –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ ERR –ª–æ–≥–æ–≤: ${escapeMarkdownV2Text(err.message)}`, { parse_mode: 'MarkdownV2' });
            return;
        }
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å MarkdownV2
        await bot.sendMessage(chatId, `üî• *ERR –ª–æ–≥ (${escapeMarkdownV2Text(PM2_APP_NAME)} - –ø–æ—Å–ª–µ–¥–Ω–∏–µ ${linesToFetch} —Å—Ç—Ä–æ–∫):*`, { parse_mode: 'MarkdownV2' });
        // –°–∞–º –ª–æ–≥ –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        await sendTelegramMessage(chatId, errLogs || '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ ERR –ª–æ–≥–µ.');
    });
}


bot.onText(/\/restart_server_site/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        await bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.');
        return;
    }

    await bot.sendMessage(chatId, `üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ *${escapeMarkdownV2Text(PM2_APP_NAME)}*...`, { parse_mode: 'MarkdownV2' });

    pm2.restart(PM2_APP_NAME, async (err, apps) => {
        if (err) {
            console.error(`Error restarting ${PM2_APP_NAME}:`, err.message);
            await bot.sendMessage(chatId, `üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ ${escapeMarkdownV2Text(PM2_APP_NAME)}:* ${escapeMarkdownV2Text(err.message)}`, { parse_mode: 'MarkdownV2' });
            return;
        }
        await bot.sendMessage(chatId, `‚úÖ *${escapeMarkdownV2Text(PM2_APP_NAME)}* —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—Ä–æ—à–µ–Ω –Ω–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\\. –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç PM2\\.`, { parse_mode: 'MarkdownV2' });
    });
});

// --- –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è PM2 ---

pm2.connect(function(err) {
    if (err) {
        console.error('Error connecting to PM2:', err.message);
        bot.sendMessage(CHAT_ID, `üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê*: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PM2\\. ${escapeMarkdownV2Text(err.message)}`, { parse_mode: 'MarkdownV2' });
        return;
    }

    console.log('Connected to PM2 daemon.');

    pm2.launchBus(function(err, bus) {
        if (err) {
            console.error('Error launching PM2 bus:', err.message);
            bot.sendMessage(CHAT_ID, `üö® *–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê*: –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —à–∏–Ω—É —Å–æ–±—ã—Ç–∏–π PM2\\. ${escapeMarkdownV2Text(err.message)}`, { parse_mode: 'MarkdownV2' });
            return;
        }

        bus.on('process:event', function(data) {
            if (data.process.name === PM2_APP_NAME) {
                let message = `üìä *–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ PM2 –¥–ª—è ${escapeMarkdownV2Text(PM2_APP_NAME)}:*\n`;
                const escapedStatus = escapeMarkdownV2Text(data.process.status);
                const escapedEvent = escapeMarkdownV2Text(data.event); // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –ø—Ä–æ–±–ª–µ–º, –µ—Å–ª–∏ event —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã

                switch (data.event) {
                    case 'stop':
                        message += `üî¥ *–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –û–°–¢–ê–ù–û–í–õ–ï–ù–û!* –°—Ç–∞—Ç—É—Å: \`${escapedStatus}\``;
                        break;
                    case 'restart':
                        message += `üü° *–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ü–ï–†–ï–ó–ê–ü–£–©–ï–ù–û!* –°—Ç–∞—Ç—É—Å: \`${escapedStatus}\``;
                        break;
                    case 'exit':
                        message += `üíî *–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –í–´–®–õ–û –ò–ó –°–¢–†–û–Ø!* –°—Ç–∞—Ç—É—Å: \`${escapedStatus}\``;
                        break;
                    case 'online':
                        message += `üü¢ *–ü–†–ò–õ–û–ñ–ï–ù–ò–ï –ó–ê–ü–£–©–ï–ù–û –ò –†–ê–ë–û–¢–ê–ï–¢!* –°—Ç–∞—Ç—É—Å: \`${escapedStatus}\``;
                        break;
                    default:
                        message += `‚ÑπÔ∏è *–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ:* \`${escapedEvent}\` –°—Ç–∞—Ç—É—Å: \`${escapedStatus}\``;
                        break;
                }
                bot.sendMessage(CHAT_ID, message, { parse_mode: 'MarkdownV2' });
            }
        });
    });
});

bot.onText(/\/status/, async (msg) => {
    const chatId = msg.chat.id;
    if (String(chatId) !== String(CHAT_ID)) {
        bot.sendMessage(chatId, '–ò–∑–≤–∏–Ω–∏—Ç–µ, —É –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É.');
        return;
    }

    await sendStatusWithHeaders(chatId);
});

// –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–ª–∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —è—Å–Ω–æ—Å—Ç–∏
async function sendStatusWithHeaders(chatId) {
    pm2.list(async (err, list) => {
        if (err) {
            await bot.sendMessage(chatId, `üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ PM2:* ${escapeMarkdownV2Text(err.message)}`, { parse_mode: 'MarkdownV2' });
            console.error('Error listing PM2 processes:', err.message);
            return;
        }

        const app = list.find(p => p.name === PM2_APP_NAME);

        let statusMessage;
        if (app) {
            statusMessage = `üìä *–°—Ç–∞—Ç—É—Å ${escapeMarkdownV2Text(PM2_APP_NAME)}:*\n`;
            statusMessage += `  *–°–æ—Å—Ç–æ—è–Ω–∏–µ:* \`${escapeMarkdownV2Text(app.pm2_env.status)}\`\n`;
            statusMessage += `  *Uptime:* \`${app.pm2_env.pm_uptime ? (Math.round((Date.now() - app.pm2_env.pm_uptime) / 1000 / 60)) + ' –º–∏–Ω' : 'N/A'}\`\n`;
            statusMessage += `  *–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–≤:* \`${app.pm2_env.restart_time}\`\n`;
            statusMessage += `  *–ü–∞–º—è—Ç—å:* \`${(app.monit.memory / 1024 / 1024).toFixed(2)} MB\`\n`;
            statusMessage += `  *CPU:* \`${app.monit.cpu}%\`\n`;
        } else {
            statusMessage = `ü§∑‚Äç‚ôÇÔ∏è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ *${escapeMarkdownV2Text(PM2_APP_NAME)}* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ PM2\\. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–æ –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ –∏–ª–∏ –∏–º—è —É–∫–∞–∑–∞–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ\\.`;
        }

        // ReplyKeyboard –Ω–µ –∏—Å—á–µ–∑–∞–µ—Ç, –ø–æ—ç—Ç–æ–º—É –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤ –Ω–µ–π –≤ –∫–∞–∂–¥–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞/–ª–æ–≥–∞.
        // –û–Ω–∞ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–∞ –ø—Ä–∏ /start –∏ –≤—Å–µ–≥–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞.
        await bot.sendMessage(chatId, statusMessage, { parse_mode: 'MarkdownV2' });
    });
}


console.log('PM2 Log & Status Telegram Bot is running and listening for commands and events...');

// --- –£–¥–∞–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback_query, —Ç–∞–∫ –∫–∞–∫ inline-–∫–Ω–æ–ø–æ–∫ –±–æ–ª—å—à–µ –Ω–µ—Ç ---
// bot.on('callback_query', async (query) => { ... });

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –±–æ—Ç–∞
bot.on('polling_error', (error) => {
    console.error('Polling error:', error.code, error.message);
});