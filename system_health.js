// system_health.js
const NodeDiskInfo = require('node-disk-info'); // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è node-disk-info
const pm2 = require('pm2');
const si = require('systeminformation'); // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º systeminformation
require('dotenv').config();
const { sendTelegramMessage } = require('./telegram');

// –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ process.env –∏ –ø–∞—Ä—Å–∏–º —á–∏—Å–ª–∞
const DISK_SPACE_THRESHOLD_PERCENT = parseInt(process.env.DISK_SPACE_THRESHOLD_PERCENT, 10);
const CPU_THRESHOLD_PERCENT = parseInt(process.env.CPU_THRESHOLD_PERCENT, 10);
const MEMORY_THRESHOLD_MB = parseInt(process.env.MEMORY_THRESHOLD_MB, 10);
const PM2_APP_NAME = process.env.PM2_APP_NAME;
const CHAT_ID = process.env.CHAT_ID;

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã (–¥–∏—Å–∫, CPU, –ø–∞–º—è—Ç—å PM2, –æ–±—â–∞—è RAM, uptime, OS info).
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã.
 */
async function checkSystemHealth() {
    console.log('Performing scheduled system health check...');
    let healthMessage = 'ü©∫ *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:*\n';
    let alertCount = 0;

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ ---
    try {
        const drives = await NodeDiskInfo.getDrives(); // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ getDrives –∫–∞–∫ –º–µ—Ç–æ–¥–∞ –æ–±—ä–µ–∫—Ç–∞
        let diskInfo = '';
        drives.forEach(drive => {
            const usedPercent = (drive.used / drive.total * 100).toFixed(2);
            const freePercent = (drive.available / drive.total * 100).toFixed(2);
            diskInfo += `   –î–∏—Å–∫ *${drive.mounted}*:\n`;
            diskInfo += `     –í—Å–µ–≥–æ: \`${(drive.total / (1024 ** 3)).toFixed(2)} GB\`\n`;
            diskInfo += `     –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: \`${(drive.used / (1024 ** 3)).toFixed(2)} GB\` (\`${usedPercent}%\`)\n`;
            diskInfo += `     –°–≤–æ–±–æ–¥–Ω–æ: \`${(drive.available / (1024 ** 3)).toFixed(2)} GB\` (\`${freePercent}%\`)\n`;

            if (parseFloat(freePercent) < DISK_SPACE_THRESHOLD_PERCENT) {
                healthMessage += `üö® *–í–Ω–∏–º–∞–Ω–∏–µ:* –ù–∏–∑–∫–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ *${drive.mounted}*: \`${freePercent}%\` —Å–≤–æ–±–æ–¥–Ω–æ (–Ω–∏–∂–µ \`${DISK_SPACE_THRESHOLD_PERCENT}%\`)\n`;
                alertCount++;
            }
        });
        healthMessage += `\nüíæ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–∞—Ö:*\n${diskInfo}`;
    } catch (e) {
        healthMessage += `üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–∞—Ö:* ${e.message}\n`;
        console.error('Error getting disk info:', e);
        alertCount++;
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ —Å–∏—Å—Ç–µ–º—ã ---
    try {
        const mem = await si.mem();
        const totalMemGB = (mem.total / (1024 ** 3)).toFixed(2);
        const usedMemGB = (mem.used / (1024 ** 3)).toFixed(2);
        const freeMemGB = (mem.free / (1024 ** 3)).toFixed(2);
        const usedMemPercent = ((mem.used / mem.total) * 100).toFixed(2);

        healthMessage += `\nüß† *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM —Å–∏—Å—Ç–µ–º—ã:*\n`;
        healthMessage += `   –í—Å–µ–≥–æ: \`${totalMemGB} GB\`\n`;
        healthMessage += `   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: \`${usedMemGB} GB\` (\`${usedMemPercent}%\`)\n`;
        healthMessage += `   –°–≤–æ–±–æ–¥–Ω–æ: \`${freeMemGB} GB\`\n`;

        // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ—Ä–æ–≥ –¥–ª—è –æ–±—â–µ–π RAM, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è
        // –ù–∞–ø—Ä–∏–º–µ—Ä: if (usedMemPercent > SOME_RAM_THRESHOLD_PERCENT) { ... }

    } catch (e) {
        healthMessage += `üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ RAM —Å–∏—Å—Ç–µ–º—ã:* ${e.message}\n`;
        console.error('Error getting system memory info:', e);
        alertCount++;
    }

    // --- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã (uptime) ---
    try {
        const osInfo = await si.osInfo(); // –î–æ–±–∞–≤–ª–µ–Ω–æ await –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
        const osUptimeSeconds = osInfo.uptime;
        const days = Math.floor(osUptimeSeconds / (3600 * 24));
        const hours = Math.floor((osUptimeSeconds % (3600 * 24)) / 3600);
        const minutes = Math.floor((osUptimeSeconds % 3600) / 60);

        healthMessage += `\n‚è±Ô∏è *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã (Uptime):*\n`;
        healthMessage += `   \`${days} –¥–Ω. ${hours} —á. ${minutes} –º–∏–Ω.\`\n`;
    } catch (e) {
        healthMessage += `üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã:* ${e.message}\n`;
        console.error('Error getting system uptime:', e);
        alertCount++;
    }

    // --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –û–°, Node.js, PM2 ---
    try {
        const os = await si.osInfo();
        const versions = await si.versions();

        healthMessage += `\nüñ•Ô∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –û–°:*\n`;
        healthMessage += `   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: \`${os.distro}\`\n`;
        healthMessage += `   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: \`${os.arch}\`\n`;
        healthMessage += `   –Ø–¥—Ä–æ: \`${os.kernel}\`\n`;
        healthMessage += `\nüíª *–í–µ—Ä—Å–∏–∏:*\n`;
        healthMessage += `   Node.js: \`${versions.node}\`\n`;
        healthMessage += `   PM2: \`${versions.pm2}\`\n`;
    } catch (e) {
        healthMessage += `üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –û–°/–≤–µ—Ä—Å–∏—è—Ö:* ${e.message}\n`;
        console.error('Error getting OS/versions info:', e);
        alertCount++;
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU –∏ –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ PM2 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    pm2.list(async (err, list) => {
        if (err) {
            healthMessage += `üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ PM2 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:* ${err.message}\n`;
            console.error('Error listing PM2 processes for health check:', err.message);
            alertCount++;
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ—à–∏–±–∫–∞ PM2, –¥–∞–∂–µ –µ—Å–ª–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–±–ª–µ–º –Ω–µ—Ç
            if (alertCount > 0) {
                 await sendTelegramMessage(CHAT_ID, healthMessage, true);
            }
            return;
        }

        const app = list.find(p => p.name === PM2_APP_NAME);
        if (app) {
            healthMessage += `\nüìà *–°–æ—Å—Ç–æ—è–Ω–∏–µ ${PM2_APP_NAME}:*\n`;
            healthMessage += `   CPU: \`${app.monit.cpu}%\`\n`;
            healthMessage += `   –ü–∞–º—è—Ç—å: \`${(app.monit.memory / 1024 / 1024).toFixed(2)} MB\`\n`;

            if (app.monit.cpu > CPU_THRESHOLD_PERCENT) {
                healthMessage += `üö® *–í–Ω–∏–º–∞–Ω–∏–µ:* CPU (\`${app.monit.cpu}%\`) –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ \`${CPU_THRESHOLD_PERCENT}%\`\n`;
                alertCount++;
            }
            if ((app.monit.memory / 1024 / 1024) > MEMORY_THRESHOLD_MB) {
                healthMessage += `üö® *–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–∞–º—è—Ç—å (\`${(app.monit.memory / 1024 / 1024).toFixed(2)} MB\`) –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ \`${MEMORY_THRESHOLD_MB} MB\`\n`;
                alertCount++;
            }
        } else {
            healthMessage += `\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ *${PM2_APP_NAME}* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ PM2 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CPU/–ø–∞–º—è—Ç–∏.\n`;
        }

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –±—ã–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã
        if (alertCount > 0) {
            await sendTelegramMessage(CHAT_ID, healthMessage, true);
        } else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –ø—Ä–æ–±–ª–µ–º –∏ —ç—Ç–æ –Ω–µ —Ä–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å
            // –î–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞, –≤–µ—Ä–æ—è—Ç–Ω–æ, –≤—Å–µ–≥–¥–∞ —Å—Ç–æ–∏—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–¥–∫—É, –¥–∞–∂–µ –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ
            // –ï—Å–ª–∏ checkSystemHealth –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é –∏ –Ω–µ—Ç –∞–ª–µ—Ä—Ç–æ–≤, –º–æ–∂–Ω–æ –æ–ø—É—Å—Ç–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É
            // –ù–æ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É" –≤—Å–µ–≥–¥–∞ –ª—É—á—à–µ –≤—ã–≤–µ—Å—Ç–∏ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç.
            // –£—á–∏—Ç—ã–≤–∞—è, —á—Ç–æ checkSystemHealth –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ç–∞–∫–∂–µ –∏–∑ index.js –ø–æ –∫–æ–º–∞–Ω–¥–µ,
            // –ª–æ–≥–∏—á–Ω–µ–µ –≤—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å healthMessage, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç alertCount.
            // –ò–∑–º–µ–Ω–∏–º –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞ –±–µ–∑—É—Å–ª–æ–≤–Ω—É—é, –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç –ø–æ –∫–æ–º–∞–Ω–¥–µ.
            await sendTelegramMessage(CHAT_ID, healthMessage, true);
            console.log('System health check passed without alerts.');
        }
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ index.js
module.exports = {
    checkSystemHealth
};