// system_health.js
const checkDiskSpace = require('check-disk-space');
const pm2 = require('pm2');
const si = require('systeminformation');
require('dotenv').config();
const { sendTelegramMessage } = require('./telegram');

// –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ process.env –∏ –ø–∞—Ä—Å–∏–º —á–∏—Å–ª–∞
const DISK_SPACE_THRESHOLD_PERCENT = parseInt(process.env.DISK_SPACE_THRESHOLD_PERCENT, 10);
const CPU_THRESHOLD_PERCENT = parseInt(process.env.CPU_THRESHOLD_PERCENT, 10);
const MEMORY_THRESHOLD_MB = parseInt(process.env.MEMORY_THRESHOLD_MB, 10);
const PM2_APP_NAME = process.env.PM2_APP_NAME;
const CHAT_ID = process.env.CHAT_ID;

// –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –∫ –¥–∏—Å–∫—É, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å.
const DISK_PATH_TO_CHECK = process.env.DISK_PATH_TO_CHECK || '/';


/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫—É —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã (–¥–∏—Å–∫, CPU, –ø–∞–º—è—Ç—å PM2, –æ–±—â–∞—è RAM, uptime, OS info).
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø–æ–≤–µ—â–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã.
 */
async function checkSystemHealth() {
    console.log('Performing scheduled system health check...');
    let healthMessage = 'ü©∫ *–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã:*\n';
    let alertCount = 0;

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–µ—Å—Ç–∞ –Ω–∞ –¥–∏—Å–∫–µ ---
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ checkDiskSpace –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —è–≤–ª—è–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏–µ–π –ø–µ—Ä–µ–¥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
        if (typeof checkDiskSpace === 'function') {
            const diskSpace = await checkDiskSpace(DISK_PATH_TO_CHECK);

            const totalGB = (diskSpace.size / (1024 ** 3)).toFixed(2);
            const usedGB = ((diskSpace.size - diskSpace.free) / (1024 ** 3)).toFixed(2);
            const freeGB = (diskSpace.free / (1024 ** 3)).toFixed(2);
            const usedPercent = ((diskSpace.size - diskSpace.free) / diskSpace.size * 100).toFixed(2);
            const freePercent = (diskSpace.free / diskSpace.size * 100).toFixed(2);

            healthMessage += `\nüíæ *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ (${DISK_PATH_TO_CHECK}):*\n`;
            healthMessage += `   –í—Å–µ–≥–æ: \`${totalGB} GB\`\n`;
            healthMessage += `   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: \`${usedGB} GB\` (\`${usedPercent}%\`)\n`;
            healthMessage += `   –°–≤–æ–±–æ–¥–Ω–æ: \`${freeGB} GB\` (\`${freePercent}%\`)\n`;

            if (parseFloat(freePercent) < DISK_SPACE_THRESHOLD_PERCENT) {
                healthMessage += `üö® *–í–Ω–∏–º–∞–Ω–∏–µ:* –ù–∏–∑–∫–æ–µ –º–µ—Å—Ç–æ –Ω–∞ –¥–∏—Å–∫–µ *${DISK_PATH_TO_CHECK}*: \`${freePercent}%\` —Å–≤–æ–±–æ–¥–Ω–æ (–Ω–∏–∂–µ \`${DISK_SPACE_THRESHOLD_PERCENT}%\`)\n`;
                alertCount++;
            }
        } else {
            // –ï—Å–ª–∏ checkDiskSpace –Ω–µ —Ñ—É–Ω–∫—Ü–∏—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –±–ª–æ–∫ –±–µ–∑ –≤—ã–≤–æ–¥–∞ –æ—à–∏–±–∫–∏ –≤ Telegram
            console.error('checkDiskSpace is not a function. Disk information will not be displayed.');
        }
    } catch (e) {
        // –≠—Ç–∞ –æ—à–∏–±–∫–∞ –±—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –∫–æ–Ω—Å–æ–ª—å —Å–µ—Ä–≤–µ—Ä–∞, –Ω–æ –Ω–µ –≤ Telegram
        console.error('Error getting disk info:', e.message);
        // alertCount++; // –ù–µ —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º alertCount –¥–ª—è —ç—Ç–æ–π –æ—à–∏–±–∫–∏, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ—ë –≤ Telegram
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—â–µ–π –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ —Å–∏—Å—Ç–µ–º—ã ---
    try {
        const mem = await si.mem();
        const totalMemGB = (mem.total / (1024 ** 3)).toFixed(2);
        const usedMemGB = (mem.used / (1024 ** 3)).toFixed(2);
        const freeMemGB = (mem.free / (1024 ** 3)).toFixed(2);
        const usedMemPercent = ((mem.used / mem.total) * 100).toFixed(2);

        healthMessage += `\nüß† *–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ RAM —Å–∏—Å—Ç–µ–º—ã:*\n`;
        healthMessage += `   –í—Å–µ–≥–æ: \`${totalMemGB} GB\`\n`;
        healthMessage += `   –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: \`${usedMemGB} GB\` (\`${usedMemPercent}%\`)\n`;
        healthMessage += `   –°–≤–æ–±–æ–¥–Ω–æ: \`${freeMemGB} GB\`\n`;

    } catch (e) {
        console.error('Error getting system memory info:', e.message);
        // alertCount++;
    }

    // --- –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã (uptime) ---
    try {
        const osInfo = await si.osInfo();
        const osUptimeSeconds = osInfo.uptime;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ osUptimeSeconds —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å NaN
        if (typeof osUptimeSeconds === 'number' && !isNaN(osUptimeSeconds)) {
            const days = Math.floor(osUptimeSeconds / (3600 * 24));
            const hours = Math.floor((osUptimeSeconds % (3600 * 24)) / 3600);
            const minutes = Math.floor((osUptimeSeconds % 3600) / 60);

            healthMessage += `\n‚è±Ô∏è *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã (Uptime):*\n`;
            healthMessage += `   \`${days} –¥–Ω. ${hours} —á. ${minutes} –º–∏–Ω.\`\n`;
        } else {
            console.error('Could not get valid system uptime. It might be NaN or undefined.');
        }
    } catch (e) {
        console.error('Error getting system uptime:', e.message);
        // alertCount++;
    }

    // --- –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –û–°, Node.js, PM2 ---
    try {
        const os = await si.osInfo();
        const versions = await si.versions();

        healthMessage += `\nüñ•Ô∏è *–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –û–°:*\n`;
        healthMessage += `   –ü–ª–∞—Ç—Ñ–æ—Ä–º–∞: \`${os.distro}\`\n`;
        healthMessage += `   –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: \`${os.arch}\`\n`;
        healthMessage += `   –Ø–¥—Ä–æ: \`${os.kernel}\`\n`;
        healthMessage += `\nüíª *–í–µ—Ä—Å–∏–∏:*\n`;
        healthMessage += `   Node.js: \`${versions.node}\`\n`;
        healthMessage += `   PM2: \`${versions.pm2}\`\n`;
    } catch (e) {
        console.error('Error getting OS/versions info:', e.message);
        // alertCount++;
    }

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ CPU –∏ –ø–∞–º—è—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ PM2 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    pm2.list(async (err, list) => {
        if (err) {
            healthMessage += `üî¥ *–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ PM2 –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:* ${err.message}\n`;
            console.error('Error listing PM2 processes for health check:', err.message);
            alertCount++;
            await sendTelegramMessage(CHAT_ID, healthMessage, true);
            return;
        }

        const app = list.find(p => p.name === PM2_APP_NAME);
        if (app) {
            healthMessage += `\nüìà *–°–æ—Å—Ç–æ—è–Ω–∏–µ ${PM2_APP_NAME}:*\n`;
            healthMessage += `   CPU: \`${app.monit.cpu}%\`\n`;
            healthMessage += `   –ü–∞–º—è—Ç—å: \`${(app.monit.memory / 1024 / 1024).toFixed(2)} MB\`\n`;

            if (app.monit.cpu > CPU_THRESHOLD_PERCENT) {
                healthMessage += `üö® *–í–Ω–∏–º–∞–Ω–∏–µ:* CPU (\`${app.monit.cpu}%\`) –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ \`${CPU_THRESHOLD_PERCENT}%\`\n`;
                alertCount++;
            }
            if ((app.monit.memory / 1024 / 1024) > MEMORY_THRESHOLD_MB) {
                healthMessage += `üö® *–í–Ω–∏–º–∞–Ω–∏–µ:* –ü–∞–º—è—Ç—å (\`${(app.monit.memory / 1024 / 1024).toFixed(2)} MB\`) –≤—ã—à–µ –ø–æ—Ä–æ–≥–∞ \`${MEMORY_THRESHOLD_MB} MB\`\n`;
                alertCount++;
            }
        } else {
            healthMessage += `\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ *${PM2_APP_NAME}* –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ PM2 –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CPU/–ø–∞–º—è—Ç–∏.\n`;
        }

        await sendTelegramMessage(CHAT_ID, healthMessage, true);
        if (alertCount === 0) {
            console.log('System health check passed without alerts.');
        }
    });
}

module.exports = {
    checkSystemHealth
};