const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

const userStates = {};

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ MarkdownV2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
async function sendTelegramMessage(chatId, text, forceSend = false, options = {}) {
    if (!text.trim() && !forceSend) {
        return;
    }

    const MAX_MESSAGE_LENGTH = 4000;
    let parts = [];
    let remainingText = text;

    while (remainingText.length > 0) {
        let part = remainingText.substring(0, MAX_MESSAGE_LENGTH);
        let lastNewline = part.lastIndexOf('\n');
        if (lastNewline !== -1 && lastNewline !== part.length - 1 && remainingText.length > MAX_MESSAGE_LENGTH) {
            part = part.substring(0, lastNewline);
            remainingText = remainingText.substring(lastNewline + 1);
        } else {
            remainingText = remainingText.substring(MAX_MESSAGE_LENGTH);
        }
        parts.push(part);
    }

    for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        try {
            // *** –ö–ª—é—á–µ–≤–æ–µ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ë—É–¥–µ—Ç –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç. ***
            // –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–Ω–æ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å MarkdownV2 (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è –ª–æ–≥–æ–≤),
            // —Ç–æ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å { parse_mode: 'MarkdownV2' } –≤ –æ–ø—Ü–∏—è—Ö –ø—Ä–∏ –≤—ã–∑–æ–≤–µ sendTelegramMessage
            await bot.sendMessage(chatId, part, options);
            console.log('Message part sent to Telegram.');
        } catch (error) {
            console.error('Error sending message to Telegram:', error.response ? error.response.data : error.message);
            // Fallback –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –¥–∞–∂–µ –æ–±—ã—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –æ—à–∏–±–∫–∞–º–∏
            try {
                await bot.sendMessage(chatId, part, {}); // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–æ–æ–±—â–µ –±–µ–∑ –æ–ø—Ü–∏–π
                console.log('Message part sent with minimal options due to error.');
            } catch (fallbackError) {
                console.error('Final fallback send failed:', fallbackError.response ? fallbackError.response.data : fallbackError.message);
            }
        }
    }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π ---
async function sendMessageWithKeyboard(chatId, text, keyboard, options = {}) {
    try {
        await bot.sendMessage(chatId, text, {
            reply_markup: keyboard.reply_markup,
            // *** –ö–ª—é—á–µ–≤–æ–µ –ò–ó–ú–ï–ù–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º parse_mode: 'MarkdownV2' –æ—Ç—Å—é–¥–∞ —Ç–æ–∂–µ. ***
            // –¢–µ–∫—Å—Ç –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ç–µ–ø–µ—Ä—å –±—É–¥–µ—Ç –æ–±—ã—á–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º,
            // –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ –Ω–µ —É–∫–∞–∑–∞–Ω `parse_mode` –≤ `options`.
            ...options
        });
    } catch (error) {
        console.error('Error sending message with keyboard:', error.response ? error.response.data : error.message);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await sendTelegramMessage(chatId, text, false, options);
    }
}

const keyboardOptions = {
    resize_keyboard: true,
    one_time_keyboard: false
};

const mainKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' }, { text: 'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' }],
            [{ text: '‚ùì –ü–æ–º–æ—â—å' }]
        ],
        ...keyboardOptions
    }
};

const managementKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }],
            [{ text: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }, { text: '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
        ],
        ...keyboardOptions
    }
};

const monitoringKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üìà –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' }, { text: 'üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤' }],
            [{ text: 'ü©∫ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É' }, { text: 'üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
        ],
        ...keyboardOptions
    }
};

// --- –ù–æ–≤—ã–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
const confirmRestartKeyboard = (chatId) => ({
    reply_markup: {
        inline_keyboard: [
            [{ text: '‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å', callback_data: `confirm_restart_${chatId}` }],
            [{ text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞', callback_data: `cancel_action_${chatId}` }]
        ]
    }
});

const confirmStopKeyboard = (chatId) => ({
    reply_markup: {
        inline_keyboard: [
            [{ text: '‚úÖ –î–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: `confirm_stop_${chatId}` }],
            [{ text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞', callback_data: `cancel_action_${chatId}` }]
        ]
    }
});

module.exports = {
    bot,
    sendTelegramMessage,
    sendMessageWithKeyboard,
    userStates,
    mainKeyboard,
    managementKeyboard,
    monitoringKeyboard,
    confirmRestartKeyboard,
    confirmStopKeyboard
};