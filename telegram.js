// telegram.js

const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config();

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

const userStates = {};

async function sendTelegramMessage(chatId, text, forceSend = false, options = {}) {
    if (!text.trim() && !forceSend) {
        return;
    }

    const MAX_MESSAGE_LENGTH = 4000;
    let parts = [];
    let remainingText = text;

    while (remainingText.length > 0) {
        let part = remainingText.substring(0, MAX_MESSAGE_LENGTH);
        let lastNewline = part.lastIndexOf('\n');
        if (lastNewline !== -1 && lastNewline !== part.length - 1 && remainingText.length > MAX_MESSAGE_LENGTH) {
            part = part.substring(0, lastNewline);
            remainingText = remainingText.substring(lastNewline + 1);
        } else {
            remainingText = remainingText.substring(MAX_MESSAGE_LENGTH);
        }
        parts.push(part);
    }

    for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        try {
            const currentOptions = i === 0 ? { parse_mode: 'MarkdownV2', ...options } : { parse_mode: 'MarkdownV2' };
            // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –µ—Å–ª–∏ —ç—Ç–æ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –Ω–µ –æ–±–æ—Ä–∞—á–∏–≤–∞–µ–º –µ–≥–æ –≤ ```
            // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –ù–ï –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å ``` –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2,
            // —Ç–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º MarkdownV2 –∏–ª–∏ —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º.
            // –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è, –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ –ª–æ–≥–∏ –≤—Å–µ–≥–¥–∞ –≤ ```, –∞ –ø—Ä–æ—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è - –±–µ–∑.
            // –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–∞ –æ–ø—Ü–∏—è parse_mode, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–µ.
            if (currentOptions.parse_mode === 'MarkdownV2' && (part.includes('```') || part.includes('*') || part.includes('_') || part.includes('[') || part.includes('('))) {
                await bot.sendMessage(chatId, part, currentOptions);
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –∏–ª–∏ –Ω–µ –Ω—É–∂–µ–Ω MarkdownV2, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ plain text
                await bot.sendMessage(chatId, part, currentOptions);
            }
            console.log('Message part sent to Telegram.');
        } catch (error) {
            console.error('Error sending message to Telegram (MarkdownV2/send failed):', error.response ? error.response.data : error.message);
            try {
                // –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ plain text, –µ—Å–ª–∏ MarkdownV2 –≤—ã–¥–∞–ª –æ—à–∏–±–∫—É
                const currentOptions = i === 0 ? options : {};
                await bot.sendMessage(chatId, part, currentOptions);
                console.log('Message part sent without MarkdownV2 due to error.');
            } catch (fallbackError) {
                console.error('Fallback send failed:', fallbackError.response ? fallbackError.response.data : fallbackError.message);
            }
        }
    }
}

async function sendMessageWithKeyboard(chatId, text, keyboard, options = {}) {
    try {
        await bot.sendMessage(chatId, text, {
            reply_markup: keyboard.reply_markup,
            ...options
        });
    } catch (error) {
        console.error('Error sending message with keyboard:', error.response ? error.response.data : error.message);
        await sendTelegramMessage(chatId, text, false, options);
    }
}

const keyboardOptions = {
    resize_keyboard: true,
    one_time_keyboard: false
};

const mainKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' }, { text: 'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' }],
            [{ text: '‚ùì –ü–æ–º–æ—â—å' }]
        ],
        ...keyboardOptions
    }
};

const managementKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }],
            [{ text: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }, { text: '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
        ],
        ...keyboardOptions
    }
};

const monitoringKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üìà –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' }, { text: 'üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤' }],
            [{ text: 'ü©∫ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É' }, { text: 'üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
        ],
        ...keyboardOptions
    }
};

// --- –ù–æ–≤—ã–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
const confirmRestartKeyboard = (chatId) => ({
    reply_markup: {
        inline_keyboard: [
            [{ text: '‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å', callback_data: `confirm_restart_${chatId}` }],
            [{ text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞', callback_data: `cancel_action_${chatId}` }]
        ]
    }
});

const confirmStopKeyboard = (chatId) => ({
    reply_markup: {
        inline_keyboard: [
            [{ text: '‚úÖ –î–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: `confirm_stop_${chatId}` }],
            [{ text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞', callback_data: `cancel_action_${chatId}` }]
        ]
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
module.exports = {
    bot,
    sendTelegramMessage,
    sendMessageWithKeyboard,
    userStates,
    mainKeyboard,
    managementKeyboard,
    monitoringKeyboard,
    confirmRestartKeyboard, // –î–æ–±–∞–≤–ª—è–µ–º –≤ —ç–∫—Å–ø–æ—Ä—Ç
    confirmStopKeyboard     // –î–æ–±–∞–≤–ª—è–µ–º –≤ —ç–∫—Å–ø–æ—Ä—Ç
};