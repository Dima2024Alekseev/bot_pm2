const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ process.env
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é ---
// –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å { chatId: 'current_menu_state' }
const userStates = {};

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å Markdown –∏ –æ–ø—Ü–∏—è–º–∏ ---
async function sendTelegramMessage(chatId, text, options = {}) {
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if (!text.trim()) {
        return;
    }

    const MAX_MESSAGE_LENGTH = 4096; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram (4096 –¥–ª—è —Ç–µ–∫—Å—Ç–∞, 4000 –¥–ª—è MarkdownV2)
    let parts = [];
    let remainingText = text;

    // –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
    while (remainingText.length > 0) {
        let part = remainingText.substring(0, MAX_MESSAGE_LENGTH);
        // –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞–∑–±–∏—Ç—å –ø–æ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ —á–∞—Å—Ç—å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–∞—è
        // –≠—Ç–æ –±–æ–ª–µ–µ –º—è–≥–∫–æ–µ —É—Å–ª–æ–≤–∏–µ, —á–µ–º 0.8, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫—É—Å–∫–æ–≤
        if (remainingText.length > MAX_MESSAGE_LENGTH) {
            let lastNewline = part.lastIndexOf('\n');
            if (lastNewline !== -1 && lastNewline > (MAX_MESSAGE_LENGTH * 0.5)) { // –ï—Å–ª–∏ –Ω–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤–æ –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–µ —á–∞—Å—Ç–∏
                part = part.substring(0, lastNewline);
                remainingText = remainingText.substring(lastNewline + 1);
            } else {
                remainingText = remainingText.substring(MAX_MESSAGE_LENGTH);
            }
        } else {
            remainingText = ''; // –í—Å—è –æ—Å—Ç–∞–≤—à–∞—è—Å—è —á–∞—Å—Ç—å - —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è
        }
        parts.push(part);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        try {
            // –ü—Ä–∏–º–µ–Ω—è–µ–º parse_mode –∏ –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏, –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –≤ —Ñ—É–Ω–∫—Ü–∏—é.
            // –ï—Å–ª–∏ parse_mode –Ω–µ —É–∫–∞–∑–∞–Ω, –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ (plain text).
            await bot.sendMessage(chatId, part, options);
            console.log('Message part sent to Telegram.');
        } catch (error) {
            console.error('Error sending message to Telegram:', error.response ? error.response.data : error.message);
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–≤—è–∑–∞–Ω–∞ —Å –ø–∞—Ä—Å–∏–Ω–≥–æ–º (—á–∞—Å—Ç–∞—è –ø—Ä–æ–±–ª–µ–º–∞ —Å MarkdownV2), –ø–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞–∫ plain text
            if (error.response && error.response.data && error.response.data.description &&
                (error.response.data.description.includes('Bad Request: can\'t parse entities') ||
                 error.response.data.description.includes('Bad Request: failed to parse'))) {
                try {
                    console.warn('Attempting to send as plain text due to Markdown parsing error.');
                    await bot.sendMessage(chatId, part); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                } catch (fallbackError) {
                    console.error('Fallback send as plain text failed:', fallbackError.response ? fallbackError.response.data : fallbackError.message);
                }
            } else {
                // –í —Å–ª—É—á–∞–µ –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫, –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º –∏ –Ω–µ —Ä–µ—Ç—Ä–∞–∏–º –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∞
                console.error('Non-parsing error, not retrying without format:', error.response ? error.response.data : error.message);
            }
        }
    }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π ---
async function sendMessageWithKeyboard(chatId, text, keyboard, options = {}) {
    try {
        await bot.sendMessage(chatId, text, {
            reply_markup: keyboard.reply_markup,
            ...options
        });
    } catch (error) {
        console.error('Error sending message with keyboard:', error.response ? error.response.data : error.message);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        // –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å –∏—Å—Ö–æ–¥–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏, –µ—Å–ª–∏ —ç—Ç–æ –±—ã–ª parse_mode
        await sendTelegramMessage(chatId, text, options); // –ø–µ—Ä–µ–¥–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–µ options, —á—Ç–æ–±—ã parse_mode —Å–æ—Ö—Ä–∞–Ω–∏–ª—Å—è
    }
}

// --- –û–±—â–∏–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
const keyboardOptions = {
    resize_keyboard: true,
    one_time_keyboard: false
};

// --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' }, { text: 'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' }],
            [{ text: '‚ùì –ü–æ–º–æ—â—å' }]
        ],
        ...keyboardOptions
    }
};

const managementKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }],
            [{ text: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }, { text: '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
        ],
        ...keyboardOptions
    }
};

const monitoringKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üìà –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' }, { text: 'üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤' }],
            [{ text: 'ü©∫ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É' }, { text: 'üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
        ],
        ...keyboardOptions
    }
};

const confirmationKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: '‚úÖ –î–∞' }, { text: '‚ùå –ù–µ—Ç' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }]
        ],
        ...keyboardOptions
    }
};


// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
    bot,
    sendTelegramMessage,
    sendMessageWithKeyboard,
    userStates,
    mainKeyboard,
    managementKeyboard,
    monitoringKeyboard,
    confirmationKeyboard
};