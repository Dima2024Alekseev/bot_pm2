const TelegramBot = require('node-telegram-bot-api');
require('dotenv').config(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Telegram –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–∑ process.env
const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true });

// --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é ---
// –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–µ–µ –º–µ–Ω—é, –≤ –∫–æ—Ç–æ—Ä–æ–º –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å { chatId: 'current_menu_state' }
const userStates = {};

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –±–µ–∑ MarkdownV2 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ---
async function sendTelegramMessage(chatId, text, forceSend = false, options = {}) {
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
    if (!text.trim() && !forceSend) {
        return;
    }

    const MAX_MESSAGE_LENGTH = 4000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
    let parts = [];
    let remainingText = text;

    // –†–∞–∑–¥–µ–ª—è–µ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ —á–∞—Å—Ç–∏
    while (remainingText.length > 0) {
        let part = remainingText.substring(0, MAX_MESSAGE_LENGTH);
        let lastNewline = part.lastIndexOf('\n');
        // –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª–∏–Ω–Ω–µ–µ MAX_MESSAGE_LENGTH –∏ –µ—Å—Ç—å —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏, –æ–±—Ä–µ–∑–∞–µ–º –ø–æ –Ω–µ–º—É
        if (lastNewline !== -1 && lastNewline !== part.length - 1 && remainingText.length > MAX_MESSAGE_LENGTH) {
            part = part.substring(0, lastNewline);
            remainingText = remainingText.substring(lastNewline + 1);
        } else {
            remainingText = remainingText.substring(MAX_MESSAGE_LENGTH);
        }
        parts.push(part);
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
    for (let i = 0; i < parts.length; i++) {
        const part = parts[i];
        try {
            // *** –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –£–±–∏—Ä–∞–µ–º parse_mode: 'MarkdownV2' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ***
            // –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç, –µ—Å–ª–∏ —è–≤–Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ –∏–Ω–æ–µ –≤ options
            await bot.sendMessage(chatId, part, options);
            console.log('Message part sent to Telegram.');
        } catch (error) {
            // –ü–æ—Å–∫–æ–ª—å–∫—É MarkdownV2 –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é,
            // —ç—Ç–æ—Ç fallback –±–ª–æ–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å –º–µ–Ω–µ–µ –∞–∫—Ç—É–∞–ª–µ–Ω, –Ω–æ –æ—Å—Ç–∞–≤–∏–º –µ–≥–æ
            // –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ –¥—Ä—É–≥–∏—Ö –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö –æ—à–∏–±–æ–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏.
            console.error('Error sending message to Telegram:', error.response ? error.response.data : error.message);
            // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –±–µ–∑ –æ–ø—Ü–∏–π (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
            try {
                await bot.sendMessage(chatId, part, {});
                console.log('Message part sent with minimal options due to error.');
            } catch (fallbackError) {
                console.error('Final fallback send failed:', fallbackError.response ? fallbackError.response.data : fallbackError.message);
            }
        }
    }
}

// --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —Å –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π ---
async function sendMessageWithKeyboard(chatId, text, keyboard, options = {}) {
    try {
        await bot.sendMessage(chatId, text, {
            reply_markup: keyboard.reply_markup,
            // *** –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨: –£–±–∏—Ä–∞–µ–º parse_mode: 'MarkdownV2' –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ***
            ...options // –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –∏–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å –¥—Ä—É–≥–∏–µ –æ–ø—Ü–∏–∏
        });
    } catch (error) {
        console.error('Error sending message with keyboard:', error.response ? error.response.data : error.message);
        // –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
        await sendTelegramMessage(chatId, text, false, options);
    }
}

// --- –û–±—â–∏–µ –æ–ø—Ü–∏–∏ –¥–ª—è –≤—Å–µ—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
const keyboardOptions = {
    resize_keyboard: true, // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –ø–æ–¥ —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
    one_time_keyboard: false // –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –±—É–¥–µ—Ç –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
};

// --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–ª–∞–≤–∏–∞—Ç—É—Ä ---
const mainKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üõ†Ô∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ' }, { text: 'üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥' }],
            [{ text: '‚ùì –ü–æ–º–æ—â—å' }]
        ],
        ...keyboardOptions
    }
};

const managementKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }],
            [{ text: '‚èπÔ∏è –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }, { text: '‚ñ∂Ô∏è –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–µ—Ä' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }] // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        ],
        ...keyboardOptions
    }
};

const monitoringKeyboard = {
    reply_markup: {
        keyboard: [
            [{ text: 'üìà –°—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è' }, { text: 'üìÑ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 20 –ª–æ–≥–æ–≤' }],
            [{ text: 'ü©∫ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏—Å—Ç–µ–º—É' }, { text: 'üìã –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π' }],
            [{ text: '‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é' }] // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
        ],
        ...keyboardOptions
    }
};

// --- –ù–æ–≤—ã–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è ---
const confirmRestartKeyboard = (chatId) => ({
    reply_markup: {
        inline_keyboard: [
            [{ text: '‚úÖ –î–∞, –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å', callback_data: `confirm_restart_${chatId}` }],
            [{ text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞', callback_data: `cancel_action_${chatId}` }]
        ]
    }
});

const confirmStopKeyboard = (chatId) => ({
    reply_markup: {
        inline_keyboard: [
            [{ text: '‚úÖ –î–∞, –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å', callback_data: `confirm_stop_${chatId}` }],
            [{ text: '‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞', callback_data: `cancel_action_${chatId}` }]
        ]
    }
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å—É—â–Ω–æ—Å—Ç–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–æ–¥—É–ª—è—Ö
module.exports = {
    bot,
    sendTelegramMessage,
    sendMessageWithKeyboard,
    userStates,
    mainKeyboard,
    managementKeyboard,
    monitoringKeyboard,
    confirmRestartKeyboard,
    confirmStopKeyboard
};